/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PertinentQuestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/Constants.ts
var AppSettings = class {
};
AppSettings.EMAIL_NL = `

`;
// Email new line
AppSettings.EMAIL_SOL = `  `;
//Email start of line
AppSettings.MAC_FOLDER_SEPARATOR = `/`;
AppSettings.ALL_CATEGORIES = "All Categories";
AppSettings.CREATE_PERTINENT_QUESTIONS = "Create Pertinent Questions";
AppSettings.SUBJECT_GOES_HERE = "SUBJECT GOES HERE";
AppSettings.FAO = "FAO";
AppSettings.CONTACTS_FILE_LOCATION = "Enter Contacts File Location";
AppSettings.CONTACTS_IMPORT_FILE = "Contacts Import File";
AppSettings.IMAGE_SPECIFIER = `image:`;
AppSettings.VIDEO_SPECIFIER = `video:`;
AppSettings.CAMPAIGN_SPECIFIER = `campaign:`;
AppSettings.DEADLINE_SPECIFIER = `deadline:`;
AppSettings.VIDEO_EMBED1 = `<center><iframe width="560" height="315" src="`;
AppSettings.VIDEO_EMBED2 = `" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>`;
AppSettings.TAGS_SPECIFIER = `tags:`;
AppSettings.URI_PLUS = `%2B`;
AppSettings.URI_SPACE = `%20`;
AppSettings.PBB_PQ_DIR = `https://projectbubbleburst.com/Pertinent+Questions/`;

// main.ts
var DEFAULT_SETTINGS = {
  questionsFolder: "Questions",
  outputFolder: "Pertinent Questions",
  contactsFile: "contacts.csv"
};
function uniqByObject(array) {
  const result = [];
  let results = 0;
  for (const item of array) {
    let duplicate = false;
    for (let i = 0; i < result.length; i++) {
      if (result[i].emailAddress == item.emailAddress) {
        duplicate = true;
        console.warn(`Duplicate contact found with email address ${item.emailAddress}`);
        break;
      }
      if (result[i].firstName == item.firstName && result[i].lastName == item.lastName) {
        duplicate = true;
        console.warn(`Duplicate contact found with first and last name ${item.firstName} ${item.lastName}`);
        break;
      }
    }
    if (!duplicate) {
      result.push(item);
    }
  }
  return result;
}
var validateEmail = (email) => {
  try {
    return email.toLowerCase().match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
  } catch (e) {
    console.error(`ERROR: Problem validating Email with ${email}`);
  }
  return false;
};
function validContact(contact) {
  let contactIsValid = true;
  if (contact == null || contact == void 0) {
    console.warn("Invalid contact - null or undefined");
    contactIsValid = false;
  } else if (!validateEmail(contact.emailAddress)) {
    console.warn(`Invalid contact - bad email: ${contact.emailAddress}`);
    contactIsValid = false;
  } else if (contact.firstName.length == 0) {
    console.warn(`Invalid contact - no firstname provided`);
    contactIsValid = false;
  } else if (contact.lastName.length == 0) {
    console.warn(`Invalid contact - no lastname provided`);
    contactIsValid = false;
  }
  return contactIsValid;
}
function fileExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFile) {
    return true;
  }
  return false;
}
function folderExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFolder) {
    return true;
  }
  return false;
}
var PertinentQuestions = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-pertinent-questions",
      name: AppSettings.CREATE_PERTINENT_QUESTIONS,
      callback: async () => {
        const categories = [];
        this.findAllCategories().forEach((cat) => {
          categories.unshift(cat);
        });
        const contacts = await this.getAllContacts(this.settings.contactsFile);
        const suggestModal = new PertinentQuestionsSuggestModal(this.app, categories, contacts, this.settings.outputFolder, this.settings.questionsFolder).open();
      }
    });
    this.addSettingTab(new PertinentSettingTab(this.app, this));
  }
  async getAllContacts(theContactFile) {
    const contacts = [];
    const folderOrFile = this.app.vault.getAbstractFileByPath(theContactFile);
    if (folderOrFile instanceof import_obsidian.TFile) {
      let fileContents = await this.app.vault.cachedRead(folderOrFile);
      const fileLines = fileContents.split("\n");
      for (let j = 0; j < fileLines.length - 1; j++) {
        const [title, firstName, lastName, emailAddress] = fileLines[j].split(",");
        const contact = { title, firstName, lastName, emailAddress };
        if (contact != null)
          console.debug(`contact = ${contact.title} and ${contact.firstName} and ${contact.lastName} and ${contact.emailAddress}`);
        if (validContact(contact)) {
          contacts.unshift(contact);
        } else {
          console.warn(`Invalid contact found - contact = ${contact}`);
        }
      }
      return uniqByObject(contacts);
    }
    return contacts;
  }
  findAllCategories() {
    const categories = [];
    function extractSecondLevelFolder(str) {
      const regex = /\/([^\/]*)\//;
      const match = str.match(regex);
      return match ? match[1] : null;
    }
    const folderOrFile = this.app.vault.getAbstractFileByPath(this.settings.questionsFolder);
    let numFolders = 0;
    if (folderOrFile instanceof import_obsidian.TFolder) {
      for (let child of folderOrFile.children) {
        if (child instanceof import_obsidian.TFile) {
        } else {
          const categoryFolder = this.app.vault.getAbstractFileByPath(child.path);
          if (categoryFolder instanceof import_obsidian.TFolder) {
            for (let innerChild of categoryFolder.children) {
              if (innerChild instanceof import_obsidian.TFile) {
                const substring = extractSecondLevelFolder(innerChild.path);
                if (substring != null) {
                  console.debug(`DEBUG: substring = ${substring}`);
                  if (!categories.contains(substring)) {
                    categories.unshift(substring);
                  }
                } else {
                  console.warn(`Couldn't extract folder substring from ${innerChild.path}`);
                }
              }
            }
          }
        }
      }
      console.debug(`numFolders=${numFolders}`);
    } else {
      console.warn(`NOT AN INSTANCE OF TFolder instead it is ${folderOrFile}`);
    }
    return categories;
  }
  onunload() {
    console.info("Unloading PertinentQuestions plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PertinentQuestionsSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, categories, contacts, outputFolder, questionsFolder) {
    super(app);
    this.vault = app.vault;
    this.categories = categories;
    this.contacts = contacts;
    this.outputFolder = outputFolder;
    this.questionsFolder = questionsFolder;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    this.categories.sort();
    if (this.categories[0] != AppSettings.ALL_CATEGORIES) {
      const index = this.categories.indexOf(AppSettings.ALL_CATEGORIES);
      this.categories.unshift(AppSettings.ALL_CATEGORIES);
    }
    return this.categories.filter(
      (cat) => cat.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(cat, el) {
    el.createEl("div", { text: cat });
  }
  // Perform action on the selected suggestion.
  async onChooseSuggestion(cat, evt) {
    this.createFolder(this.outputFolder);
    let theContent = "\n\n## Contacts\n> [!NOTE]\n>**Remember - send the questions to your friends, family, colleagues and local businesses first and foremost to avoid central censorship.**\n>\n> *To pose a pertinent question, the question must first be unapposed.*\n\nBelow is a short list of some country political representatives and WEF aligned companies. For further information, see: https://en.wikipedia.org/wiki/List_of_legislatures_by_country";
    theContent = theContent.concat("\n\n### Global\n- WEF Companies - https://www.weforum.org/partners#search [Let them know where your money will not be spent](https://projectbubbleburst.com/Actions/Action+18+-+Let+them+know+-+FTheWEF)");
    theContent = theContent.concat("\n### Australia\n- List Senators and Members: https://www.aph.gov.au/Senators_and_Members/Parliamentarian_Search_Results?q=&mem=1&par=-1&gen=0&ps=0");
    theContent = theContent.concat("\n### Canada\n- List of MPs: https://www.ourcommons.ca/members/en/search");
    theContent = theContent.concat("\n### EU\n- List of MEPs: https://www.europarl.europa.eu/meps/en/full-list/all");
    theContent = theContent.concat("\n### Finland\n- List of MPs: https://www.eduskunta.fi/EN/kansanedustajat/nykyiset_kansanedustajat/Pages/default.aspx");
    theContent = theContent.concat("\n### Germany\n- List of MPs: https://www.bundestag.de/en/members");
    theContent = theContent.concat("\n### Ireland\n- List of TDs and Senators: https://www.oireachtas.ie/en/members/");
    theContent = theContent.concat("\n### Netherlands\n- List of MPs: https://www.houseofrepresentatives.nl/members_of_parliament/members_of_parliament");
    theContent = theContent.concat("\n### New Zealand\n- List of MPs: https://www.parliament.nz/en/mps-and-electorates/members-of-parliament/");
    theContent = theContent.concat("\n### Norway\n- List of MPs: https://www.stortinget.no/en/In-English/Members-of-the-Storting/current-members-of-parliament/");
    theContent = theContent.concat("\n### Sweden\n- List of MPs: https://www.riksdagen.se/en/Members-and-parties/");
    theContent = theContent.concat("\n### Switzerland\n- List of MPs: https://www.parlament.ch/en/organe/national-council/members-national-council-a-z");
    theContent = theContent.concat("\n### UK\n- Spreadsheet list of MPs: https://www.theyworkforyou.com/mps/?f=csv\n- Find your MP: https://members.parliament.uk/members/commons\n- Find a Lord: https://members.parliament.uk/members/lords");
    theContent = theContent.concat("\n### US\n- List of Senators: https://www.senate.gov/senators/");
    this.createFile(this.outputFolder.concat("/Pertinent Contacts.md"), theContent);
    if (cat != AppSettings.ALL_CATEGORIES) {
      this.categories = [cat];
    } else {
      this.categories.shift();
    }
    for (let j = 0; j < this.categories.length; j++) {
      console.debug(`cat ${j} = ${this.categories[j]}`);
      let theQuestions = await this.getCategoryQuestions(this.categories[j]);
      if (theQuestions != null) {
        const theFolder = this.outputFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR).concat(this.categories[j]);
        this.createFolder(theFolder);
        if (this.contacts.length > 0) {
          for (let i = 0; i < this.contacts.length; i++) {
            for (let k = 0; k < theQuestions.length; k++) {
              let theQuestion = theQuestions[k];
              this.writeQuestionFile(theQuestion, theFolder, this.categories[j], this.contacts.at(i));
            }
          }
        } else {
          for (let k = 0; k < theQuestions.length; k++) {
            let theQuestion = theQuestions[k];
            this.writeQuestionFile(theQuestion, theFolder, this.categories[j]);
          }
        }
      } else {
        console.warn(`Couldn't read any file at ${this.questionsFolder} `);
      }
    }
  }
  isACampaign(campaign) {
    let itIs = false;
    if (campaign == null) {
      ;
    } else if (campaign == void 0) {
      ;
    } else if (campaign.contains("true")) {
      itIs = true;
    }
    return itIs;
  }
  getTags(tags) {
    let theTags = "";
    if (tags == null) {
      ;
    } else if (tags == void 0) {
      ;
    } else if (tags == "") {
      ;
    } else {
      try {
        const theTagsArray = tags.split(",");
        theTags = AppSettings.TAGS_SPECIFIER.concat(" [");
        for (let i = 0; i < theTagsArray.length; i++) {
          if (i != 0) {
            theTags = theTags.concat(",");
          }
          theTags = theTags.concat(theTagsArray[i]);
        }
        theTags = theTags.concat("]");
      } catch (e) {
        console.error(`Uncaught exception getting tags: ${e}`);
      }
    }
    return theTags;
  }
  getDeadline(deadline) {
    let theDeadline = "";
    if (deadline == null) {
      ;
    } else if (deadline == void 0) {
      ;
    } else if (deadline == "") {
      ;
    } else {
      try {
        theDeadline = AppSettings.DEADLINE_SPECIFIER.concat(" ").concat(deadline.replace(/\s/g, ""));
      } catch (e) {
        console.error(`Uncaught exception in getDeadline: ${e}`);
      }
    }
    return theDeadline;
  }
  formatHashtags(theQuestion) {
    let theTags = "";
    if (theQuestion.tags.length > 0) {
      const tagsArray = theQuestion.tags.replace(/,/g, " ").split(" ");
      let tags = "";
      for (let i = 0; i < tagsArray.length; i++) {
        tags = tags.concat("#").concat(tagsArray[i]).concat(" ");
      }
      theTags = theTags.concat(tags);
    }
    return theTags;
  }
  async writeQuestionFile(theQuestion, theFolder, category, contact) {
    const theSubject = AppSettings.SUBJECT_GOES_HERE;
    const aCampaign = this.isACampaign(theQuestion.campaign);
    let deadline = this.getDeadline(theQuestion.deadline);
    if (deadline != "") {
      deadline = "\n".concat(deadline);
    }
    let tags = this.getTags(theQuestion.tags);
    if (tags != "") {
      tags = "\n".concat(tags);
    }
    const theFileFrontMatter = `---
publish: true
tosend: true
sent: false
category: ${category}
campaign: ${aCampaign}${deadline}${tags}
---
## Instructions
[FAQ and Help](https://projectbubbleburst.com/Pertinent+Questions+Help)

- reSearch - The content and reSearch Media. Make sure you personalise your email with your own reasoned arguments and feelings.
- Send It!
- Share It!
- [Support Us](https://projectbubbleburst.com/Support+Us)

## Send It
Personalise the message below
`;
    const theQuestionFile = theQuestion.body.split(AppSettings.EMAIL_NL, 2);
    const theQuestionFileName = theQuestionFile[0];
    const indexBodyStart = theQuestion.body.indexOf(AppSettings.EMAIL_NL) + AppSettings.EMAIL_NL.length;
    const theQuestionBody = theQuestion.body.substring(indexBodyStart);
    if (indexBodyStart != void 0) {
      let theBody = "";
      let theFileName = "";
      if (contact) {
        theBody = `${AppSettings.FAO} ${contact.title} ${contact.firstName} ${contact.lastName}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(contact.firstName + contact.lastName + "-" + theQuestionFileName + ".md");
      } else {
        theBody = `${AppSettings.FAO}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(theQuestionFileName) + ".md";
      }
      let theFile = await this.createFile(theFileName, theFileFrontMatter);
      if (theFile instanceof import_obsidian.TFile) {
        let theContent = "";
        if (contact) {
          theContent = "```email\n".concat(`to: ${contact.emailAddress}
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        } else {
          theContent = "```email\n".concat(`to: someone@example.com
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        }
        theContent = theContent.concat(AppSettings.EMAIL_NL).concat("\n> [!NOTE] Note\n>Please see [[Pertinent Contacts|Contacts]] for political representatives and other ideas for who to send information\n## Share It\n");
        let tweet = "[Twitter](https://twitter.com/intent/tweet?text=";
        let tweetBody = this.formatHashtags(theQuestion);
        const re = / /g;
        tweetBody = tweetBody.concat(AppSettings.PBB_PQ_DIR).concat(theQuestionFileName.replace(re, "+"));
        tweet = tweet.concat(encodeURIComponent(tweetBody)).concat(")\n");
        theContent = theContent.concat(tweet);
        let fb = "[Facebook](https://www.facebook.com/sharer.php?u=";
        let fbBody = this.formatHashtags(theQuestion);
        fbBody = fbBody.concat(AppSettings.PBB_PQ_DIR).concat(theQuestionFileName.replace(re, "+"));
        fb = fb.concat(encodeURIComponent(fbBody)).concat(")\n\n");
        theContent = theContent.concat(fb);
        theContent = theContent.concat("## reSearch Media\n### Image\n");
        if (theQuestion.image.length > 0) {
          theContent = theContent.concat(AppSettings.EMAIL_NL).concat(theQuestion.image);
        }
        theContent = theContent.concat("\n### Video\n");
        if (theQuestion.video.length > 0) {
          theContent = theContent.concat(AppSettings.VIDEO_EMBED1).concat(theQuestion.video).concat(AppSettings.VIDEO_EMBED2);
        }
        try {
          await this.app.vault.append(theFile, theContent);
        } catch (e) {
          new import_obsidian.Notice("Could not append");
          console.error(`Could not append to file: ${theFileName} due to ${e}`);
        }
      } else {
        new import_obsidian.Notice("Could not create file");
        console.error(`Error - could not create file for ${theFileName}`);
      }
    }
  }
  // function constructTweet(str: string): string | null {
  // 	const regex = /\/([^\/]*)\//;
  // 	const match = str.match(regex);
  // 	return match ? match[1] : null;
  // }
  async createFile(theFilePath, content) {
    try {
      if (!fileExists(theFilePath, this.app)) {
        let createdFile = await this.app.vault.create(theFilePath, content);
        console.debug(`DEBUG:Created File ${theFilePath}`);
        return createdFile;
      }
    } catch (e) {
      console.error(`createFile: filePath: $theFilePath, error: ${e}`);
    }
    return null;
  }
  async createFolder(theFolder) {
    try {
      if (!folderExists(theFolder, this.app)) {
        await this.app.vault.createFolder(theFolder);
      }
    } catch (e) {
      console.error(e);
    }
  }
  // getCategoryQuestions adds the file name as the first line/element in the return string
  async getCategoryQuestions(category) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(this.questionsFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR.concat(category)));
      if (folderOrFile instanceof import_obsidian.TFolder) {
        const theQuestions = [];
        for (let child of folderOrFile.children) {
          if (child instanceof import_obsidian.TFile) {
            let theQuestionLines = await this.app.vault.cachedRead(child);
            const index = child.path.lastIndexOf(AppSettings.MAC_FOLDER_SEPARATOR);
            if (index != void 0) {
              let theFileFullPath = child.path + "\n";
              const theQuestion = { body: "", image: "", video: "", tags: "", campaign: "", deadline: "" };
              theQuestion.body = theFileFullPath.substring(index + 1, theFileFullPath.length - 4);
              const questionLines = theQuestionLines.split("\n");
              const lineStart = AppSettings.EMAIL_NL.concat(AppSettings.EMAIL_SOL);
              for (let i = 0; i < questionLines.length; i++) {
                if (questionLines[i].contains(AppSettings.IMAGE_SPECIFIER)) {
                  theQuestion.image = questionLines[i].split(AppSettings.IMAGE_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.VIDEO_SPECIFIER)) {
                  theQuestion.video = questionLines[i].split(AppSettings.VIDEO_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.TAGS_SPECIFIER)) {
                  theQuestion.tags = questionLines[i].split(AppSettings.TAGS_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.CAMPAIGN_SPECIFIER)) {
                  theQuestion.campaign = questionLines[i].split(AppSettings.CAMPAIGN_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.DEADLINE_SPECIFIER)) {
                  theQuestion.deadline = questionLines[i].split(AppSettings.DEADLINE_SPECIFIER)[1];
                } else {
                  theQuestion.body += lineStart.concat(questionLines[i]);
                }
              }
              theQuestions.unshift(theQuestion);
            }
          }
        }
        return theQuestions;
      } else {
        console.warn(`Expected folder in getCategoryQuestions param but sent ${this.questionsFolder.concat(category)}`);
        return null;
      }
    } catch (e) {
      console.error(e);
    }
    return null;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PertinentSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Questions Folder").setDesc("Enter the Folder Location").addText((text) => text.setPlaceholder("Enter Questions Folder").setValue(this.plugin.settings.questionsFolder).onChange(async (value) => {
      console.debug("Questions Location: " + value);
      this.plugin.settings.questionsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Questions Output Folder").setDesc("Enter the Pertinent Questions Output Folder Location").addText((text) => text.setPlaceholder("Enter Pertinent Questions Output Folder").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      console.debug("Output Folder Location: " + value);
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(AppSettings.CONTACTS_IMPORT_FILE).setDesc("Enter the Contacts Import File Location").addText((text) => text.setPlaceholder(AppSettings.CONTACTS_FILE_LOCATION).setValue(this.plugin.settings.contactsFile).onChange(async (value) => {
      this.plugin.settings.contactsFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
