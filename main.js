/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PertinentQuestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  questionsFolder: "Questions/",
  outputFolder: "Persistent Questions/",
  contactsFile: "contacts.csv"
};
var PertinentQuestions = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-pertinent-questions",
      name: "Create Pertinent Questions",
      callback: async () => {
        const categories = [];
        this.findAllCategories().forEach((cat) => {
          categories.unshift(cat);
        });
        const contacts = [];
        let allContacts = await this.getAllContacts(this.settings.contactsFile);
        if (allContacts != null) {
          allContacts.forEach((contact) => {
            contacts.unshift(contact);
          });
        }
        const suggestModal = new PertinentQuestionsSuggestModal(this.app, categories, contacts, this.settings.outputFolder, this.settings.questionsFolder).open();
      }
    });
    this.addSettingTab(new PersistentSettingTab(this.app, this));
  }
  async getAllContacts(theContactFile) {
    const files = this.app.vault.getFiles();
    let found = false;
    const contacts = [];
    for (let i = 0; i < files.length; i++) {
      const fileName = files[i].name;
      if (fileName.startsWith(theContactFile)) {
        found = true;
        const fileContents = await this.app.vault.cachedRead(files[i]);
        const fileLines = fileContents.split("\n");
        for (let j = 0; j < fileLines.length; j++) {
          const contactFields = fileLines[j].split(",");
          contacts.unshift(contactFields);
        }
        i = files.length;
      }
    }
    if (!found) {
      console.log(`Didn't find a contacts file`);
      new import_obsidian.Notice(`Contacts file not found - expected ${this.settings.contactsFile}`);
    } else {
      return contacts;
    }
    return null;
  }
  findAllCategories() {
    const files = this.app.vault.getMarkdownFiles();
    const categories = [];
    function extractSecondLevelFolder(str) {
      const regex = /\/([^\/]*)\//;
      const match = str.match(regex);
      return match ? match[1] : null;
    }
    let found = false;
    for (let i = 0; i < files.length; i++) {
      const thePath = files[i].path;
      if (thePath.startsWith(this.settings.questionsFolder)) {
        const substring = extractSecondLevelFolder(thePath);
        if (substring != null) {
          categories.unshift(substring);
          found = true;
        }
      } else {
      }
    }
    if (!found) {
      console.log(`Questions folder not found: ${this.settings.questionsFolder}`);
    }
    console.log(`Returning cats = ${categories}`);
    return categories;
  }
  onunload() {
    console.log("Unloading PertinentQuestions plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PertinentQuestionsSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, categories, contacts, outputFolder, questionsFolder) {
    super(app);
    this.vault = app.vault;
    this.categories = categories;
    this.contacts = contacts;
    this.outputFolder = outputFolder;
    this.questionsFolder = questionsFolder;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    return this.categories.filter(
      (cat) => cat.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(cat, el) {
    el.createEl("div", { text: cat });
  }
  // Perform action on the selected suggestion.
  async onChooseSuggestion(cat, evt) {
    const fileContents = [];
    this.createFolder(this.outputFolder);
    for (let j = 0; j < this.categories.length; j++) {
      console.log(`cat ${j} = ${this.categories[j]}`);
      fileContents.unshift(this.getCategoryQuestions());
      const theFolder = this.outputFolder.concat(this.categories[j]).concat("/");
      this.createFolder(theFolder);
      for (let i = 0; i < this.contacts.length; i++) {
        console.log(`contact ${i} = ${this.contacts[i]}`);
        const [title, firstName, lastName, emailAddress] = this.contacts[i];
        const theSubject = "SUBJECT GOES HERE";
        const theFileMetaData = `---
sent: false
category: ${this.categories[j]}
---

`;
        const theBody = "BODY GOES HERE";
        const theFilePath = theFolder.concat(firstName + lastName + ".md");
        const fileExists = await this.fileExists(theFilePath);
        if (!fileExists) {
          let theFile = this.createFile(theFilePath, theFileMetaData);
          if (theFile != null) {
            const theContent = theFileMetaData.concat("```email\n".concat(`to: ${emailAddress}
subject: ${theSubject}
body: "${theBody}"
`).concat("```").concat("\n#ToSend"));
            try {
              await this.app.vault.append(theFile, theContent);
            } catch (e) {
              console.log(`Could not append to file: ${theFilePath} due to ${e}`);
            }
          } else {
            console.log(`Error - could not create file for ${theFilePath}`);
          }
        } else {
          console.log(`theFilePath ${theFilePath} does not exist`);
        }
      }
    }
  }
  async fileExists(filePath) {
    return await this.app.vault.adapter.exists(filePath);
  }
  async createFile(theFilePath, content) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(theFilePath);
      if (folderOrFile instanceof import_obsidian.TFile) {
        console.log(`Already created file!!!`);
        return folderOrFile;
      } else if (folderOrFile instanceof import_obsidian.TFolder) {
        console.log(`Expected to create file but folder specified: ${theFilePath}`);
      } else {
        const createdFile = await this.app.vault.create(theFilePath, content);
        createdFile.basename = theFilePath;
        console.log("Created");
        return createdFile;
      }
    } catch (e) {
      console.log(e);
    }
    return null;
  }
  async createFolder(theFolder) {
    try {
      await this.app.vault.createFolder(theFolder);
      console.log("Created");
    } catch (e) {
      console.log(e);
    }
  }
  getCategoryQuestions() {
    return ["Q1", "QW"];
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PersistentSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Questions Folder").setDesc("Enter the Folder Location").addText((text) => text.setPlaceholder("Enter Questions Folder").setValue(this.plugin.settings.questionsFolder).onChange(async (value) => {
      console.log("Questions Location: " + value);
      this.plugin.settings.questionsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Questions Output Folder").setDesc("Enter the Persistent Questions Output Folder Location").addText((text) => text.setPlaceholder("Enter Persistent Questions Output Folder").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      console.log("Output Folder Location: " + value);
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Contacts Import File").setDesc("Enter the Contacts Import File Location").addText((text) => text.setPlaceholder("Enter Contacts File Location").setValue(this.plugin.settings.contactsFile).onChange(async (value) => {
      console.log("Contacts File Location: " + value);
      this.plugin.settings.contactsFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
