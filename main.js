/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PertinentQuestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/AppSettings.ts
var AppSettings = class {
};
AppSettings.EMAIL_NL = `

`;
// Email new line
AppSettings.EMAIL_SOL = `  `;
//Email start of line
AppSettings.MAC_FOLDER_SEPARATOR = `/`;
AppSettings.ALL_CATEGORIES = "All Categories";
AppSettings.CREATE_PERTINENT_QUESTIONS = "Create Pertinent Questions";
AppSettings.SUBJECT_GOES_HERE = "SUBJECT GOES HERE";
AppSettings.FAO = "FAO";

// main.ts
var DEFAULT_SETTINGS = {
  questionsFolder: "Questions",
  outputFolder: "Pertinent Questions",
  contactsFile: "contacts.csv"
};
var PertinentQuestions = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-pertinent-questions",
      name: AppSettings.CREATE_PERTINENT_QUESTIONS,
      callback: async () => {
        const categories = [];
        this.findAllCategories().forEach((cat) => {
          categories.unshift(cat);
        });
        const contacts = [];
        let allContacts = await this.getAllContacts(this.settings.contactsFile);
        if (allContacts != null) {
          allContacts.forEach((contact) => {
            contacts.unshift(contact);
          });
        }
        const suggestModal = new PertinentQuestionsSuggestModal(this.app, categories, contacts, this.settings.outputFolder, this.settings.questionsFolder).open();
      }
    });
    this.addSettingTab(new PertinentSettingTab(this.app, this));
  }
  async getAllContacts(theContactFile) {
    const files = this.app.vault.getFiles();
    let found = false;
    const contacts = [];
    for (let i = 0; i < files.length; i++) {
      const fileName = files[i].name;
      if (fileName.startsWith(theContactFile)) {
        found = true;
        const fileContents = await this.app.vault.cachedRead(files[i]);
        const fileLines = fileContents.split("\n");
        for (let j = 0; j < fileLines.length; j++) {
          const contactFields = fileLines[j].split(",");
          contacts.unshift(contactFields);
        }
        i = files.length;
      }
    }
    if (!found) {
      console.log(`Didn't find a contacts file`);
      new import_obsidian.Notice(`Contacts file not found - expected ${this.settings.contactsFile}`);
    } else {
      return contacts;
    }
    return null;
  }
  findAllCategories() {
    const categories = [];
    function extractSecondLevelFolder(str) {
      const regex = /\/([^\/]*)\//;
      const match = str.match(regex);
      return match ? match[1] : null;
    }
    const folderOrFile = this.app.vault.getAbstractFileByPath(this.settings.questionsFolder);
    let numFolders = 0;
    if (folderOrFile instanceof import_obsidian.TFolder) {
      for (let child of folderOrFile.children) {
        if (child instanceof import_obsidian.TFile) {
        } else {
          const categoryFolder = this.app.vault.getAbstractFileByPath(child.path);
          console.log(`catFolder = ${categoryFolder} and childPath = ${child.path}************`);
          if (categoryFolder instanceof import_obsidian.TFolder) {
            for (let innerChild of categoryFolder.children) {
              if (innerChild instanceof import_obsidian.TFile) {
                const substring = extractSecondLevelFolder(innerChild.path);
                console.log(`substring============${substring} from ${innerChild.path}`);
                if (substring != null) {
                  if (!categories.contains(substring)) {
                    categories.unshift(substring);
                  }
                } else {
                  console.log(`Couldn't extract folder substring from ${innerChild.path}`);
                }
              }
            }
          }
        }
      }
      console.log(`numFolders=${numFolders}`);
    } else {
      console.log(`NOT AN INSTANCE OF TFolder instead it is ${folderOrFile}`);
    }
    categories.unshift(AppSettings.ALL_CATEGORIES);
    return categories;
  }
  onunload() {
    console.log("Unloading PertinentQuestions plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PertinentQuestionsSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, categories, contacts, outputFolder, questionsFolder) {
    super(app);
    this.vault = app.vault;
    this.categories = categories;
    this.contacts = contacts;
    this.outputFolder = outputFolder;
    this.questionsFolder = questionsFolder;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    this.categories.sort();
    if (this.categories[0] != AppSettings.ALL_CATEGORIES) {
      const index = this.categories.indexOf(AppSettings.ALL_CATEGORIES);
      this.categories.splice(index, 1);
      this.categories.unshift(AppSettings.ALL_CATEGORIES);
    }
    return this.categories.filter(
      (cat) => cat.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(cat, el) {
    el.createEl("div", { text: cat });
  }
  // Perform action on the selected suggestion.
  async onChooseSuggestion(cat, evt) {
    this.createFolder(this.outputFolder);
    if (cat != AppSettings.ALL_CATEGORIES) {
      this.categories = [cat];
    }
    for (let j = 0; j < this.categories.length; j++) {
      console.log(`cat ${j} = ${this.categories[j]}`);
      let theQuestions = await this.getCategoryQuestions(this.categories[j]);
      if (theQuestions != null) {
        const theFolder = this.outputFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR).concat(this.categories[j]);
        this.createFolder(theFolder);
        for (let i = 0; i < this.contacts.length; i++) {
          console.log(`contact ${i} = ${this.contacts[i]}`);
          for (let k = 0; k < theQuestions.length; k++) {
            let theQuestion = theQuestions[k];
            const [title, firstName, lastName, emailAddress] = this.contacts[i];
            const theSubject = AppSettings.SUBJECT_GOES_HERE;
            const theFileMetaData = `---
sent: false
category: ${this.categories[j]}
---

`;
            const theQuestionFileName = theQuestion.split("\n", 2);
            const index = theQuestion.indexOf("\n");
            if (index != void 0) {
              theQuestion = theQuestion.substring(index, theQuestion.length - 1);
              const theBody = `${AppSettings.FAO} ${title} ${firstName} ${lastName}${theQuestion}`;
              const theFileName = theFolder.concat("/").concat(firstName + lastName + "-" + theQuestionFileName[0] + ".md");
              const fileExists = await this.fileExists(theFileName);
              if (!fileExists) {
                console.log(`CREATING FILE *** ${theFileName}`);
                let theFile = await this.createFile(theFileName, theFileMetaData);
                if (theFile instanceof import_obsidian.TFile) {
                  const theContent = "```email\n".concat(`to: ${emailAddress}
subject: ${theSubject}

body: "${theBody}"
`).concat("```").concat("\n#ToSend");
                  try {
                    await this.app.vault.append(theFile, theContent);
                  } catch (e) {
                    new import_obsidian.Notice("Could not append");
                    console.log(`Could not append to file: ${theFileName} due to ${e}`);
                  }
                } else {
                  new import_obsidian.Notice("Could not create file");
                  console.log(`Error - could not create file for ${theFileName}`);
                }
              } else {
              }
            }
          }
        }
      } else {
        console.log(`Couldn't read any file at ${this.questionsFolder} `);
      }
    }
  }
  async fileExists(filePath) {
    return await this.app.vault.adapter.exists(filePath);
  }
  async createFile(theFilePath, content) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(theFilePath);
      if (folderOrFile instanceof import_obsidian.TFile) {
        console.log(`Already created file!!!`);
        return folderOrFile;
      } else if (folderOrFile instanceof import_obsidian.TFolder) {
        console.log(`Expected to create file but folder specified: ${theFilePath}`);
      } else {
        console.log(`Creating File ${theFilePath}`);
        const createdFile = await this.app.vault.create(theFilePath, content);
        return createdFile;
      }
    } catch (e) {
      console.log(e);
    }
    return null;
  }
  async createFolder(theFolder) {
    try {
      await this.app.vault.createFolder(theFolder);
      console.log("Created");
    } catch (e) {
      console.log(e);
    }
  }
  async getCategoryQuestions(category) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(this.questionsFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR.concat(category)));
      if (folderOrFile instanceof import_obsidian.TFolder) {
        const theQuestions = [];
        for (let child of folderOrFile.children) {
          if (child instanceof import_obsidian.TFile) {
            let theQuestionLines = await this.app.vault.cachedRead(child);
            const index = child.path.lastIndexOf(AppSettings.MAC_FOLDER_SEPARATOR);
            if (index != void 0) {
              let theQuestion = child.path + "\n";
              theQuestion = theQuestion.substring(index + 1, theQuestion.length - 4);
              const questionLines = theQuestionLines.split("\n");
              const lineStart = AppSettings.EMAIL_NL.concat(AppSettings.EMAIL_SOL);
              for (let i = 0; i < questionLines.length; i++) {
                theQuestion += lineStart.concat(questionLines[i]);
              }
              theQuestions.unshift(theQuestion);
            }
          }
        }
        return theQuestions;
      } else {
        console.log(`Expected folder in getCategoryQuestions param but sent ${this.questionsFolder.concat(category)}`);
        return null;
      }
    } catch (e) {
      console.log(e);
    }
    return null;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PertinentSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Questions Folder").setDesc("Enter the Folder Location").addText((text) => text.setPlaceholder("Enter Questions Folder").setValue(this.plugin.settings.questionsFolder).onChange(async (value) => {
      console.log("Questions Location: " + value);
      this.plugin.settings.questionsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Questions Output Folder").setDesc("Enter the Pertinent Questions Output Folder Location").addText((text) => text.setPlaceholder("Enter Pertinent Questions Output Folder").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      console.log("Output Folder Location: " + value);
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Contacts Import File").setDesc("Enter the Contacts Import File Location").addText((text) => text.setPlaceholder("Enter Contacts File Location").setValue(this.plugin.settings.contactsFile).onChange(async (value) => {
      console.log("Contacts File Location: " + value);
      this.plugin.settings.contactsFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
