/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PertinentQuestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/Constants.ts
var AppSettings = class {
};
AppSettings.EMAIL_NL = `

`;
// Email new line
AppSettings.EMAIL_SOL = `  `;
//Email start of line
AppSettings.MAC_FOLDER_SEPARATOR = `/`;
AppSettings.ALL_CATEGORIES = "All Categories";
AppSettings.CREATE_PERTINENT_QUESTIONS = "Create Pertinent Questions";
AppSettings.SUBJECT_GOES_HERE = "SUBJECT GOES HERE";
AppSettings.FAO = "FAO";
AppSettings.CONTACTS_FILE_LOCATION = "Enter Contacts File Location";
AppSettings.CONTACTS_IMPORT_FILE = "Contacts Import File";
AppSettings.IMAGE_SPECIFIER = `image:`;
AppSettings.VIDEO_SPECIFIER = `video:`;

// main.ts
var DEFAULT_SETTINGS = {
  questionsFolder: "Questions",
  outputFolder: "Pertinent Questions",
  contactsFile: "contacts.csv"
};
function uniqByObject(array) {
  const result = [];
  let results = 0;
  for (const item of array) {
    let duplicate = false;
    for (let i = 0; i < result.length; i++) {
      if (result[i].emailAddress == item.emailAddress) {
        duplicate = true;
        console.warn(`Duplicate contact found with email address ${item.emailAddress}`);
        break;
      }
      if (result[i].firstName == item.firstName && result[i].lastName == item.lastName) {
        duplicate = true;
        console.warn(`Duplicate contact found with first and last name ${item.firstName} ${item.lastName}`);
        break;
      }
    }
    if (!duplicate) {
      result.push(item);
    }
  }
  return result;
}
var validateEmail = (email) => {
  try {
    return email.toLowerCase().match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
  } catch (e) {
    console.error(`ERROR: Problem validating Email with ${email}`);
  }
  return false;
};
function validContact(contact) {
  let contactIsValid = true;
  if (contact == null || contact == void 0) {
    console.warn("Invalid contact - null or undefined");
    contactIsValid = false;
  } else if (!validateEmail(contact.emailAddress)) {
    console.warn(`Invalid contact - bad email: ${contact.emailAddress}`);
    contactIsValid = false;
  } else if (contact.firstName.length == 0) {
    console.warn(`Invalid contact - no firstname provided`);
    contactIsValid = false;
  } else if (contact.lastName.length == 0) {
    console.warn(`Invalid contact - no lastname provided`);
    contactIsValid = false;
  }
  return contactIsValid;
}
function fileExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFile) {
    return true;
  }
  return false;
}
function folderExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFolder) {
    return true;
  }
  return false;
}
function getShareThis(image, video) {
  return "";
}
var PertinentQuestions = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-pertinent-questions",
      name: AppSettings.CREATE_PERTINENT_QUESTIONS,
      callback: async () => {
        const categories = [];
        this.findAllCategories().forEach((cat) => {
          categories.unshift(cat);
        });
        const contacts = await this.getAllContacts(this.settings.contactsFile);
        const suggestModal = new PertinentQuestionsSuggestModal(this.app, categories, contacts, this.settings.outputFolder, this.settings.questionsFolder).open();
      }
    });
    this.addSettingTab(new PertinentSettingTab(this.app, this));
  }
  async getAllContacts(theContactFile) {
    const contacts = [];
    const folderOrFile = this.app.vault.getAbstractFileByPath(theContactFile);
    if (folderOrFile instanceof import_obsidian.TFile) {
      let fileContents = await this.app.vault.cachedRead(folderOrFile);
      const fileLines = fileContents.split("\n");
      for (let j = 0; j < fileLines.length - 1; j++) {
        const [title, firstName, lastName, emailAddress] = fileLines[j].split(",");
        const contact = { title, firstName, lastName, emailAddress };
        if (contact != null)
          console.debug(`contact = ${contact.title} and ${contact.firstName} and ${contact.lastName} and ${contact.emailAddress}`);
        if (validContact(contact)) {
          contacts.unshift(contact);
        } else {
          console.warn(`Invalid contact found - contact = ${contact}`);
        }
      }
      return uniqByObject(contacts);
    }
    return contacts;
  }
  findAllCategories() {
    const categories = [];
    function extractSecondLevelFolder(str) {
      const regex = /\/([^\/]*)\//;
      const match = str.match(regex);
      return match ? match[1] : null;
    }
    const folderOrFile = this.app.vault.getAbstractFileByPath(this.settings.questionsFolder);
    let numFolders = 0;
    if (folderOrFile instanceof import_obsidian.TFolder) {
      for (let child of folderOrFile.children) {
        if (child instanceof import_obsidian.TFile) {
        } else {
          const categoryFolder = this.app.vault.getAbstractFileByPath(child.path);
          if (categoryFolder instanceof import_obsidian.TFolder) {
            for (let innerChild of categoryFolder.children) {
              if (innerChild instanceof import_obsidian.TFile) {
                const substring = extractSecondLevelFolder(innerChild.path);
                if (substring != null) {
                  console.debug(`DEBUG: substring = ${substring}`);
                  if (!categories.contains(substring)) {
                    categories.unshift(substring);
                  }
                } else {
                  console.warn(`Couldn't extract folder substring from ${innerChild.path}`);
                }
              }
            }
          }
        }
      }
      console.debug(`numFolders=${numFolders}`);
    } else {
      console.warn(`NOT AN INSTANCE OF TFolder instead it is ${folderOrFile}`);
    }
    return categories;
  }
  onunload() {
    console.info("Unloading PertinentQuestions plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PertinentQuestionsSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, categories, contacts, outputFolder, questionsFolder) {
    super(app);
    this.vault = app.vault;
    this.categories = categories;
    this.contacts = contacts;
    this.outputFolder = outputFolder;
    this.questionsFolder = questionsFolder;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    this.categories.sort();
    if (this.categories[0] != AppSettings.ALL_CATEGORIES) {
      const index = this.categories.indexOf(AppSettings.ALL_CATEGORIES);
      this.categories.unshift(AppSettings.ALL_CATEGORIES);
    }
    return this.categories.filter(
      (cat) => cat.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(cat, el) {
    el.createEl("div", { text: cat });
  }
  // Perform action on the selected suggestion.
  async onChooseSuggestion(cat, evt) {
    this.createFolder(this.outputFolder);
    if (cat != AppSettings.ALL_CATEGORIES) {
      this.categories = [cat];
    } else {
      this.categories.shift();
    }
    for (let j = 0; j < this.categories.length; j++) {
      console.debug(`cat ${j} = ${this.categories[j]}`);
      let theQuestions = await this.getCategoryQuestions(this.categories[j]);
      if (theQuestions != null) {
        const theFolder = this.outputFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR).concat(this.categories[j]);
        this.createFolder(theFolder);
        if (this.contacts.length > 0) {
          for (let i = 0; i < this.contacts.length; i++) {
            for (let k = 0; k < theQuestions.length; k++) {
              let theQuestion = theQuestions[k];
              this.writeQuestionFile(theQuestion, theFolder, this.categories[j], this.contacts.at(i));
            }
          }
        } else {
          for (let k = 0; k < theQuestions.length; k++) {
            let theQuestion = theQuestions[k];
            this.writeQuestionFile(theQuestion, theFolder, this.categories[j]);
          }
        }
      } else {
        console.warn(`Couldn't read any file at ${this.questionsFolder} `);
      }
    }
  }
  async writeQuestionFile(theQuestion, theFolder, category, contact) {
    const theSubject = AppSettings.SUBJECT_GOES_HERE;
    const theFileFrontMatter = `---
publish: true
tosend: true
sent: false
category: ${category}
---
`;
    const theQuestionFile = theQuestion.body.split(AppSettings.EMAIL_NL, 2);
    const theQuestionFileName = theQuestionFile[0];
    const indexBodyStart = theQuestion.body.indexOf(AppSettings.EMAIL_NL) + AppSettings.EMAIL_NL.length;
    const theQuestionBody = theQuestion.body.substring(indexBodyStart);
    if (indexBodyStart != void 0) {
      let theBody = "";
      let theFileName = "";
      if (contact) {
        theBody = `${AppSettings.FAO} ${contact.title} ${contact.firstName} ${contact.lastName}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(contact.firstName + contact.lastName + "-" + theQuestionFileName + ".md");
      } else {
        theBody = `${AppSettings.FAO}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(theQuestionFileName) + ".md";
      }
      let theFile = await this.createFile(theFileName, theFileFrontMatter);
      if (theFile instanceof import_obsidian.TFile) {
        let theContent = "";
        if (contact) {
          theContent = "```email\n".concat(`to: ${contact.emailAddress}
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        } else {
          theContent = "```email\n".concat(`to: someone@example.com
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        }
        theContent.concat("\n\n").concat(getShareThis(false, false));
        try {
          await this.app.vault.append(theFile, theContent);
        } catch (e) {
          new import_obsidian.Notice("Could not append");
          console.error(`Could not append to file: ${theFileName} due to ${e}`);
        }
      } else {
        new import_obsidian.Notice("Could not create file");
        console.error(`Error - could not create file for ${theFileName}`);
      }
    }
  }
  async createFile(theFilePath, content) {
    try {
      if (!fileExists(theFilePath, this.app)) {
        let createdFile = await this.app.vault.create(theFilePath, content);
        console.debug(`DEBUG:Created File ${theFilePath}`);
        return createdFile;
      }
    } catch (e) {
      console.error(`createFile: filePath: $theFilePath, error: ${e}`);
    }
    return null;
  }
  async createFolder(theFolder) {
    try {
      if (!folderExists(theFolder, this.app)) {
        await this.app.vault.createFolder(theFolder);
      }
    } catch (e) {
      console.error(e);
    }
  }
  // getCategoryQuestions adds the file name as the first line/element in the return string
  async getCategoryQuestions(category) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(this.questionsFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR.concat(category)));
      if (folderOrFile instanceof import_obsidian.TFolder) {
        const theQuestions = [];
        for (let child of folderOrFile.children) {
          if (child instanceof import_obsidian.TFile) {
            let theQuestionLines = await this.app.vault.cachedRead(child);
            const index = child.path.lastIndexOf(AppSettings.MAC_FOLDER_SEPARATOR);
            if (index != void 0) {
              let theFileFullPath = child.path + "\n";
              const theQuestion = { body: "", image: "", video: "" };
              theQuestion.body = theFileFullPath.substring(index + 1, theFileFullPath.length - 4);
              const questionLines = theQuestionLines.split("\n");
              const lineStart = AppSettings.EMAIL_NL.concat(AppSettings.EMAIL_SOL);
              for (let i = 0; i < questionLines.length; i++) {
                if (questionLines[i].contains(AppSettings.IMAGE_SPECIFIER)) {
                  theQuestion.image = questionLines[i];
                } else if (questionLines[i].contains(AppSettings.VIDEO_SPECIFIER)) {
                  theQuestion.video = questionLines[i];
                } else {
                  theQuestion.body += lineStart.concat(questionLines[i]);
                }
              }
              theQuestions.unshift(theQuestion);
            }
          }
        }
        return theQuestions;
      } else {
        console.warn(`Expected folder in getCategoryQuestions param but sent ${this.questionsFolder.concat(category)}`);
        return null;
      }
    } catch (e) {
      console.error(e);
    }
    return null;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PertinentSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Questions Folder").setDesc("Enter the Folder Location").addText((text) => text.setPlaceholder("Enter Questions Folder").setValue(this.plugin.settings.questionsFolder).onChange(async (value) => {
      console.debug("Questions Location: " + value);
      this.plugin.settings.questionsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Questions Output Folder").setDesc("Enter the Pertinent Questions Output Folder Location").addText((text) => text.setPlaceholder("Enter Pertinent Questions Output Folder").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      console.debug("Output Folder Location: " + value);
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(AppSettings.CONTACTS_IMPORT_FILE).setDesc("Enter the Contacts Import File Location").addText((text) => text.setPlaceholder(AppSettings.CONTACTS_FILE_LOCATION).setValue(this.plugin.settings.contactsFile).onChange(async (value) => {
      this.plugin.settings.contactsFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
