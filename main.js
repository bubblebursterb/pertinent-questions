/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PertinentQuestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/Constants.ts
var AppSettings = class {
};
AppSettings.EMAIL_NL = `

`;
// Email new line
AppSettings.EMAIL_SOL = `  `;
//Email start of line
AppSettings.MAC_FOLDER_SEPARATOR = `/`;
AppSettings.ALL_CATEGORIES = "All Categories";
AppSettings.CREATE_PERTINENT_QUESTIONS = "Create Pertinent Questions";
AppSettings.SUBJECT_GOES_HERE = "SUBJECT GOES HERE";
AppSettings.FAO = "FAO";
AppSettings.CONTACTS_FILE_LOCATION = "Enter Contacts File Location";
AppSettings.CONTACTS_IMPORT_FILE = "Contacts Import File";
AppSettings.IMAGE_SPECIFIER = `image:`;
AppSettings.VIDEO_SPECIFIER = `video:`;
AppSettings.CAMPAIGN_SPECIFIER = `campaign:`;
AppSettings.DEADLINE_SPECIFIER = `deadline:`;
AppSettings.VIDEO_EMBED1 = `<center><iframe width="560" height="315" src="`;
AppSettings.VIDEO_EMBED2 = `" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>`;
AppSettings.TAGS_SPECIFIER = `tags:`;
AppSettings.URI_PLUS = `%2B`;
AppSettings.URI_SPACE = `%20`;
AppSettings.PBB_PQ_DIR = `https://projectbubbleburst.com/Pertinent+Questions/`;

// main.ts
var DEFAULT_SETTINGS = {
  questionsFolder: "Questions",
  outputFolder: "Pertinent Questions",
  contactsFile: "contacts.csv"
};
function uniqByObject(array) {
  const result = [];
  let results = 0;
  for (const item of array) {
    let duplicate = false;
    for (let i = 0; i < result.length; i++) {
      if (result[i].emailAddress == item.emailAddress) {
        duplicate = true;
        console.warn(`Duplicate contact found with email address ${item.emailAddress}`);
        break;
      }
      if (result[i].firstName == item.firstName && result[i].lastName == item.lastName) {
        duplicate = true;
        console.warn(`Duplicate contact found with first and last name ${item.firstName} ${item.lastName}`);
        break;
      }
    }
    if (!duplicate) {
      result.push(item);
    }
  }
  return result;
}
var validateEmail = (email) => {
  try {
    return email.toLowerCase().match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
  } catch (e) {
    console.error(`ERROR: Problem validating Email with ${email}`);
  }
  return false;
};
function validContact(contact) {
  let contactIsValid = true;
  if (contact == null || contact == void 0) {
    console.warn("Invalid contact - null or undefined");
    contactIsValid = false;
  } else if (!validateEmail(contact.emailAddress)) {
    console.warn(`Invalid contact - bad email: ${contact.emailAddress}`);
    contactIsValid = false;
  } else if (contact.firstName.length == 0) {
    console.warn(`Invalid contact - no firstname provided`);
    contactIsValid = false;
  } else if (contact.lastName.length == 0) {
    console.warn(`Invalid contact - no lastname provided`);
    contactIsValid = false;
  }
  return contactIsValid;
}
function fileExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFile) {
    return true;
  }
  return false;
}
function folderExists(filePath, app) {
  const folderOrFile = app.vault.getAbstractFileByPath(filePath);
  if (folderOrFile instanceof import_obsidian.TFolder) {
    return true;
  }
  return false;
}
var PertinentQuestions = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-pertinent-questions",
      name: AppSettings.CREATE_PERTINENT_QUESTIONS,
      callback: async () => {
        const categories = [];
        this.findAllCategories().forEach((cat) => {
          categories.unshift(cat);
        });
        const contacts = await this.getAllContacts(this.settings.contactsFile);
        const suggestModal = new PertinentQuestionsSuggestModal(this.app, categories, contacts, this.settings.outputFolder, this.settings.questionsFolder).open();
      }
    });
    this.addSettingTab(new PertinentSettingTab(this.app, this));
  }
  async getAllContacts(theContactFile) {
    const contacts = [];
    const folderOrFile = this.app.vault.getAbstractFileByPath(theContactFile);
    if (folderOrFile instanceof import_obsidian.TFile) {
      let fileContents = await this.app.vault.cachedRead(folderOrFile);
      const fileLines = fileContents.split("\n");
      for (let j = 0; j < fileLines.length - 1; j++) {
        const [title, firstName, lastName, emailAddress] = fileLines[j].split(",");
        const contact = { title, firstName, lastName, emailAddress };
        if (contact != null)
          console.debug(`contact = ${contact.title} and ${contact.firstName} and ${contact.lastName} and ${contact.emailAddress}`);
        if (validContact(contact)) {
          contacts.unshift(contact);
        } else {
          console.warn(`Invalid contact found - contact = ${contact}`);
        }
      }
      return uniqByObject(contacts);
    }
    return contacts;
  }
  findAllCategories() {
    const categories = [];
    function extractSecondLevelFolder(str) {
      const regex = /\/([^\/]*)\//;
      const match = str.match(regex);
      return match ? match[1] : null;
    }
    const folderOrFile = this.app.vault.getAbstractFileByPath(this.settings.questionsFolder);
    let numFolders = 0;
    if (folderOrFile instanceof import_obsidian.TFolder) {
      for (let child of folderOrFile.children) {
        if (child instanceof import_obsidian.TFile) {
        } else {
          const categoryFolder = this.app.vault.getAbstractFileByPath(child.path);
          if (categoryFolder instanceof import_obsidian.TFolder) {
            for (let innerChild of categoryFolder.children) {
              if (innerChild instanceof import_obsidian.TFile) {
                const substring = extractSecondLevelFolder(innerChild.path);
                if (substring != null) {
                  console.debug(`DEBUG: substring = ${substring}`);
                  if (!categories.contains(substring)) {
                    categories.unshift(substring);
                  }
                } else {
                  console.warn(`Couldn't extract folder substring from ${innerChild.path}`);
                }
              }
            }
          }
        }
      }
      console.debug(`numFolders=${numFolders}`);
    } else {
      console.warn(`NOT AN INSTANCE OF TFolder instead it is ${folderOrFile}`);
    }
    return categories;
  }
  onunload() {
    console.info("Unloading PertinentQuestions plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PertinentQuestionsSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, categories, contacts, outputFolder, questionsFolder) {
    super(app);
    this.vault = app.vault;
    this.categories = categories;
    this.contacts = contacts;
    this.outputFolder = outputFolder;
    this.questionsFolder = questionsFolder;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    this.categories.sort();
    if (this.categories[0] != AppSettings.ALL_CATEGORIES) {
      const index = this.categories.indexOf(AppSettings.ALL_CATEGORIES);
      this.categories.unshift(AppSettings.ALL_CATEGORIES);
    }
    return this.categories.filter(
      (cat) => cat.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renders each suggestion item.
  renderSuggestion(cat, el) {
    el.createEl("div", { text: cat });
  }
  // Perform action on the selected suggestion.
  async onChooseSuggestion(cat, evt) {
    this.createFolder(this.outputFolder);
    if (cat != AppSettings.ALL_CATEGORIES) {
      this.categories = [cat];
    } else {
      this.categories.shift();
    }
    for (let j = 0; j < this.categories.length; j++) {
      console.debug(`cat ${j} = ${this.categories[j]}`);
      let theQuestions = await this.getCategoryQuestions(this.categories[j]);
      if (theQuestions != null) {
        const theFolder = this.outputFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR).concat(this.categories[j]);
        this.createFolder(theFolder);
        if (this.contacts.length > 0) {
          for (let i = 0; i < this.contacts.length; i++) {
            for (let k = 0; k < theQuestions.length; k++) {
              let theQuestion = theQuestions[k];
              this.writeQuestionFile(theQuestion, theFolder, this.categories[j], this.contacts.at(i));
            }
          }
        } else {
          for (let k = 0; k < theQuestions.length; k++) {
            let theQuestion = theQuestions[k];
            this.writeQuestionFile(theQuestion, theFolder, this.categories[j]);
          }
        }
      } else {
        console.warn(`Couldn't read any file at ${this.questionsFolder} `);
      }
    }
  }
  isACampaign(campaign) {
    let itIs = false;
    if (campaign == null) {
      ;
    } else if (campaign == void 0) {
      ;
    } else if (campaign.contains("true")) {
      itIs = true;
    }
    return itIs;
  }
  getTags(tags) {
    let theTags = "";
    if (tags == null) {
      ;
    } else if (tags == void 0) {
      ;
    } else if (tags == "") {
      ;
    } else {
      try {
        const theTagsArray = tags.split(",");
        theTags = AppSettings.TAGS_SPECIFIER.concat(" [");
        for (let i = 0; i < theTagsArray.length; i++) {
          if (i != 0) {
            theTags = theTags.concat(",");
          }
          theTags = theTags.concat(theTagsArray[i]);
        }
        theTags = theTags.concat("]");
      } catch (e) {
        console.error(`Uncaught exception getting tags: ${e}`);
      }
    }
    return theTags;
  }
  getDeadline(deadline) {
    let theDeadline = "";
    if (deadline == null) {
      ;
    } else if (deadline == void 0) {
      ;
    } else if (deadline == "") {
      ;
    } else {
      try {
        theDeadline = AppSettings.DEADLINE_SPECIFIER.concat(" ").concat(deadline.replace(/\s/g, ""));
      } catch (e) {
        console.error(`Uncaught exception in getDeadline: ${e}`);
      }
    }
    return theDeadline;
  }
  formatHashtags(theQuestion) {
    let theTags = "";
    if (theQuestion.tags.length > 0) {
      const tagsArray = theQuestion.tags.replace(/,/g, " ").split(" ");
      let tags = "";
      for (let i = 0; i < tagsArray.length; i++) {
        tags = tags.concat("#").concat(tagsArray[i]).concat(" ");
      }
      theTags = theTags.concat(tags);
    }
    return theTags;
  }
  async writeQuestionFile(theQuestion, theFolder, category, contact) {
    const theSubject = AppSettings.SUBJECT_GOES_HERE;
    const aCampaign = this.isACampaign(theQuestion.campaign);
    let deadline = this.getDeadline(theQuestion.deadline);
    if (deadline != "") {
      deadline = "\n".concat(deadline);
    }
    let tags = this.getTags(theQuestion.tags);
    if (tags != "") {
      tags = "\n".concat(tags);
    }
    const theFileFrontMatter = `---
publish: true
tosend: true
sent: false
category: ${category}
campaign: ${aCampaign}${deadline}${tags}
---
## Instructions
- reSearch - The content and reSearch Media
- Send It!
- Share It!
- [Support Us](https://projectbubbleburst.com/Support+Us)

## Send It
`;
    const theQuestionFile = theQuestion.body.split(AppSettings.EMAIL_NL, 2);
    const theQuestionFileName = theQuestionFile[0];
    const indexBodyStart = theQuestion.body.indexOf(AppSettings.EMAIL_NL) + AppSettings.EMAIL_NL.length;
    const theQuestionBody = theQuestion.body.substring(indexBodyStart);
    if (indexBodyStart != void 0) {
      let theBody = "";
      let theFileName = "";
      if (contact) {
        theBody = `${AppSettings.FAO} ${contact.title} ${contact.firstName} ${contact.lastName}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(contact.firstName + contact.lastName + "-" + theQuestionFileName + ".md");
      } else {
        theBody = `${AppSettings.FAO}` + AppSettings.EMAIL_NL + `${theQuestionBody}`;
        theFileName = theFolder.concat("/").concat(theQuestionFileName) + ".md";
      }
      let theFile = await this.createFile(theFileName, theFileFrontMatter);
      if (theFile instanceof import_obsidian.TFile) {
        let theContent = "";
        if (contact) {
          theContent = "```email\n".concat(`to: ${contact.emailAddress}
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        } else {
          theContent = "```email\n".concat(`to: someone@example.com
subject: ${theSubject}
body: "${theBody}"
`).concat("```");
        }
        theContent = theContent.concat(AppSettings.EMAIL_NL).concat("## Share It\n");
        let tweet = "[Twitter](https://twitter.com/intent/tweet?text=";
        let tweetBody = this.formatHashtags(theQuestion);
        const re = / /g;
        tweetBody = tweetBody.concat(AppSettings.PBB_PQ_DIR).concat(theQuestionFileName.replace(re, "+"));
        tweet = tweet.concat(encodeURIComponent(tweetBody)).concat(")\n");
        theContent = theContent.concat(tweet);
        let fb = "[Facebook](https://www.facebook.com/sharer.php?u=";
        let fbBody = this.formatHashtags(theQuestion);
        fbBody = fbBody.concat(AppSettings.PBB_PQ_DIR).concat(theQuestionFileName.replace(re, "+"));
        fb = fb.concat(encodeURIComponent(fbBody)).concat(")\n\n");
        theContent = theContent.concat(fb);
        theContent = theContent.concat("## reSearch Media\n### Image\n");
        if (theQuestion.image.length > 0) {
          theContent = theContent.concat(AppSettings.EMAIL_NL).concat(theQuestion.image);
        }
        theContent = theContent.concat("\n### Video\n");
        if (theQuestion.video.length > 0) {
          theContent = theContent.concat(AppSettings.VIDEO_EMBED1).concat(theQuestion.video).concat(AppSettings.VIDEO_EMBED2);
        }
        try {
          await this.app.vault.append(theFile, theContent);
        } catch (e) {
          new import_obsidian.Notice("Could not append");
          console.error(`Could not append to file: ${theFileName} due to ${e}`);
        }
      } else {
        new import_obsidian.Notice("Could not create file");
        console.error(`Error - could not create file for ${theFileName}`);
      }
    }
  }
  // function constructTweet(str: string): string | null {
  // 	const regex = /\/([^\/]*)\//;
  // 	const match = str.match(regex);
  // 	return match ? match[1] : null;
  // }
  async createFile(theFilePath, content) {
    try {
      if (!fileExists(theFilePath, this.app)) {
        let createdFile = await this.app.vault.create(theFilePath, content);
        console.debug(`DEBUG:Created File ${theFilePath}`);
        return createdFile;
      }
    } catch (e) {
      console.error(`createFile: filePath: $theFilePath, error: ${e}`);
    }
    return null;
  }
  async createFolder(theFolder) {
    try {
      if (!folderExists(theFolder, this.app)) {
        await this.app.vault.createFolder(theFolder);
      }
    } catch (e) {
      console.error(e);
    }
  }
  // getCategoryQuestions adds the file name as the first line/element in the return string
  async getCategoryQuestions(category) {
    try {
      const folderOrFile = this.app.vault.getAbstractFileByPath(this.questionsFolder.concat(AppSettings.MAC_FOLDER_SEPARATOR.concat(category)));
      if (folderOrFile instanceof import_obsidian.TFolder) {
        const theQuestions = [];
        for (let child of folderOrFile.children) {
          if (child instanceof import_obsidian.TFile) {
            let theQuestionLines = await this.app.vault.cachedRead(child);
            const index = child.path.lastIndexOf(AppSettings.MAC_FOLDER_SEPARATOR);
            if (index != void 0) {
              let theFileFullPath = child.path + "\n";
              const theQuestion = { body: "", image: "", video: "", tags: "", campaign: "", deadline: "" };
              theQuestion.body = theFileFullPath.substring(index + 1, theFileFullPath.length - 4);
              const questionLines = theQuestionLines.split("\n");
              const lineStart = AppSettings.EMAIL_NL.concat(AppSettings.EMAIL_SOL);
              for (let i = 0; i < questionLines.length; i++) {
                if (questionLines[i].contains(AppSettings.IMAGE_SPECIFIER)) {
                  theQuestion.image = questionLines[i].split(AppSettings.IMAGE_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.VIDEO_SPECIFIER)) {
                  theQuestion.video = questionLines[i].split(AppSettings.VIDEO_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.TAGS_SPECIFIER)) {
                  theQuestion.tags = questionLines[i].split(AppSettings.TAGS_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.CAMPAIGN_SPECIFIER)) {
                  theQuestion.campaign = questionLines[i].split(AppSettings.CAMPAIGN_SPECIFIER)[1];
                } else if (questionLines[i].contains(AppSettings.DEADLINE_SPECIFIER)) {
                  theQuestion.deadline = questionLines[i].split(AppSettings.DEADLINE_SPECIFIER)[1];
                } else {
                  theQuestion.body += lineStart.concat(questionLines[i]);
                }
              }
              theQuestions.unshift(theQuestion);
            }
          }
        }
        return theQuestions;
      } else {
        console.warn(`Expected folder in getCategoryQuestions param but sent ${this.questionsFolder.concat(category)}`);
        return null;
      }
    } catch (e) {
      console.error(e);
    }
    return null;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PertinentSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Questions Folder").setDesc("Enter the Folder Location").addText((text) => text.setPlaceholder("Enter Questions Folder").setValue(this.plugin.settings.questionsFolder).onChange(async (value) => {
      console.debug("Questions Location: " + value);
      this.plugin.settings.questionsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Questions Output Folder").setDesc("Enter the Pertinent Questions Output Folder Location").addText((text) => text.setPlaceholder("Enter Pertinent Questions Output Folder").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      console.debug("Output Folder Location: " + value);
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(AppSettings.CONTACTS_IMPORT_FILE).setDesc("Enter the Contacts Import File Location").addText((text) => text.setPlaceholder(AppSettings.CONTACTS_FILE_LOCATION).setValue(this.plugin.settings.contactsFile).onChange(async (value) => {
      this.plugin.settings.contactsFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvQ29uc3RhbnRzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgU3VnZ2VzdE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUsIFRGb2xkZXIsIFdvcmtzcGFjZUxlYWYsIFZhdWx0IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQXBwU2V0dGluZ3MgYXMgQ29uc3RhbnRzIH0gZnJvbSBcInNyYy9Db25zdGFudHNcIjtcblxuLy8gaW1wb3J0IHsgQ1NWVmlldywgVklFV19UWVBFX0NTViB9IGZyb20gXCIuL3ZpZXdcIjtcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmludGVyZmFjZSBQZXJ0aW5lbnRRdWVzdGlvbnNTZXR0aW5ncyB7XG5cdHF1ZXN0aW9uc0ZvbGRlcjogc3RyaW5nO1xuXHRvdXRwdXRGb2xkZXI6IHN0cmluZztcblx0Y29udGFjdHNGaWxlOiBzdHJpbmc7XG5cblxufVxuXG50eXBlIENvbnRhY3QgPSB7XG5cdHRpdGxlOiBzdHJpbmc7XG5cdGZpcnN0TmFtZTogc3RyaW5nO1xuXHRsYXN0TmFtZTogc3RyaW5nO1xuXHRlbWFpbEFkZHJlc3M6IHN0cmluZztcbn07XG5cbnR5cGUgUXVlc3Rpb25JbmZvID0ge1xuXHRib2R5OiBzdHJpbmc7XG5cdGltYWdlOiBzdHJpbmc7XG5cdHZpZGVvOiBzdHJpbmc7XG5cdHRhZ3M6IHN0cmluZztcblx0Y2FtcGFpZ246IHN0cmluZztcblx0ZGVhZGxpbmU6IHN0cmluZztcbn1cblxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQZXJ0aW5lbnRRdWVzdGlvbnNTZXR0aW5ncyA9IHtcblx0cXVlc3Rpb25zRm9sZGVyOiAnUXVlc3Rpb25zJyxcblx0b3V0cHV0Rm9sZGVyOiAnUGVydGluZW50IFF1ZXN0aW9ucycsXG5cdGNvbnRhY3RzRmlsZTogJ2NvbnRhY3RzLmNzdidcblxufVxuXG5mdW5jdGlvbiB1bmlxQnlPYmplY3QoYXJyYXk6IENvbnRhY3RbXSk6IENvbnRhY3RbXSB7XG5cdGNvbnN0IHJlc3VsdDogQ29udGFjdFtdID0gW107XG5cdGxldCByZXN1bHRzID0gMDtcblx0Zm9yIChjb25zdCBpdGVtIG9mIGFycmF5KSB7XG5cdFx0bGV0IGR1cGxpY2F0ZSA9IGZhbHNlO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocmVzdWx0W2ldLmVtYWlsQWRkcmVzcyA9PSBpdGVtLmVtYWlsQWRkcmVzcykge1xuXHRcdFx0XHRkdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYER1cGxpY2F0ZSBjb250YWN0IGZvdW5kIHdpdGggZW1haWwgYWRkcmVzcyAke2l0ZW0uZW1haWxBZGRyZXNzfWApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICgocmVzdWx0W2ldLmZpcnN0TmFtZSA9PSBpdGVtLmZpcnN0TmFtZSkgJiYgKHJlc3VsdFtpXS5sYXN0TmFtZSA9PSBpdGVtLmxhc3ROYW1lKSkge1xuXHRcdFx0XHRkdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYER1cGxpY2F0ZSBjb250YWN0IGZvdW5kIHdpdGggZmlyc3QgYW5kIGxhc3QgbmFtZSAke2l0ZW0uZmlyc3ROYW1lfSAke2l0ZW0ubGFzdE5hbWV9YCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIWR1cGxpY2F0ZSkge1xuXHRcdFx0cmVzdWx0LnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHZhbGlkYXRlRW1haWwgPSAoZW1haWw6IHN0cmluZykgPT4ge1xuXHR0cnkge1xuXHRcdHJldHVybiBlbWFpbFxuXHRcdFx0LnRvTG93ZXJDYXNlKClcblx0XHRcdC5tYXRjaChcblx0XHRcdFx0L14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfC4oXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkL1xuXHRcdFx0KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVSUk9SOiBQcm9ibGVtIHZhbGlkYXRpbmcgRW1haWwgd2l0aCAke2VtYWlsfWApO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIHZhbGlkQ29udGFjdChjb250YWN0OiBDb250YWN0KTogYm9vbGVhbiB7XG5cdGxldCBjb250YWN0SXNWYWxpZCA9IHRydWU7XG5cdGlmIChjb250YWN0ID09IG51bGwgfHwgY29udGFjdCA9PSB1bmRlZmluZWQpIHtcblx0XHRjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNvbnRhY3QgLSBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0XHRjb250YWN0SXNWYWxpZCA9IGZhbHNlO1xuXHR9IGVsc2UgaWYgKCF2YWxpZGF0ZUVtYWlsKGNvbnRhY3QuZW1haWxBZGRyZXNzKSkge1xuXHRcdGNvbnNvbGUud2FybihgSW52YWxpZCBjb250YWN0IC0gYmFkIGVtYWlsOiAke2NvbnRhY3QuZW1haWxBZGRyZXNzfWApO1xuXHRcdGNvbnRhY3RJc1ZhbGlkID0gZmFsc2U7XG5cdH0gZWxzZSBpZiAoY29udGFjdC5maXJzdE5hbWUubGVuZ3RoID09IDApIHtcblx0XHRjb25zb2xlLndhcm4oYEludmFsaWQgY29udGFjdCAtIG5vIGZpcnN0bmFtZSBwcm92aWRlZGApO1xuXHRcdGNvbnRhY3RJc1ZhbGlkID0gZmFsc2U7XG5cdH0gZWxzZSBpZiAoY29udGFjdC5sYXN0TmFtZS5sZW5ndGggPT0gMCkge1xuXHRcdGNvbnNvbGUud2FybihgSW52YWxpZCBjb250YWN0IC0gbm8gbGFzdG5hbWUgcHJvdmlkZWRgKTtcblx0XHRjb250YWN0SXNWYWxpZCA9IGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGNvbnRhY3RJc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBmaWxlRXhpc3RzKGZpbGVQYXRoOiBzdHJpbmcsIGFwcDogQXBwKTogYm9vbGVhbiB7XG5cdGNvbnN0IGZvbGRlck9yRmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xuXHRpZiAoZm9sZGVyT3JGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gZm9sZGVyRXhpc3RzKGZpbGVQYXRoOiBzdHJpbmcsIGFwcDogQXBwKTogYm9vbGVhbiB7XG5cdGNvbnN0IGZvbGRlck9yRmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xuXG5cdGlmIChmb2xkZXJPckZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbi8vIGZ1bmN0aW9uIGdldFNoYXJlVGhpcyhpbWFnZTogYm9vbGVhbiwgdmlkZW86IGJvb2xlYW4pOiBzdHJpbmcge1xuLy8gXHQvL1R3aXR0ZXJcbi8vIFx0Ly9UZWxlZ3JhbVxuLy8gXHQvL1doYXRzYXBwXG4vLyBcdC8vRmFjZWJvb2tcbi8vIFx0Ly9QaW50ZXJlc3Rcbi8vIFx0Ly9Xb3JkcHJlc3Ncbi8vIFx0Ly9UaWt0b2tcbi8vIFx0aWYgKGltYWdlKXtcblxuLy8gXHR9XG4vLyBcdGlmIHt2aWRlb317XG5cbi8vIFx0fVxuLy8gXHRyZXR1cm4gXCJcIjtcbi8vIH1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVydGluZW50UXVlc3Rpb25zIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IFBlcnRpbmVudFF1ZXN0aW9uc1NldHRpbmdzO1xuXG5cblxuXHRhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIEFkZCBjb21tYW5kIHRvIGxhdW5jaCBBc2sgUGVydGluZW50IFF1ZXN0aW9uc1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2NyZWF0ZS1wZXJ0aW5lbnQtcXVlc3Rpb25zJyxcblx0XHRcdG5hbWU6IENvbnN0YW50cy5DUkVBVEVfUEVSVElORU5UX1FVRVNUSU9OUyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGNhdGVnb3JpZXM6IHN0cmluZ1tdID0gW107XG5cdFx0XHRcdHRoaXMuZmluZEFsbENhdGVnb3JpZXMoKS5mb3JFYWNoKGNhdCA9PiB7XG5cdFx0XHRcdFx0Y2F0ZWdvcmllcy51bnNoaWZ0KGNhdCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGNvbnN0IGNvbnRhY3RzOiBDb250YWN0W10gPSBhd2FpdCB0aGlzLmdldEFsbENvbnRhY3RzKHRoaXMuc2V0dGluZ3MuY29udGFjdHNGaWxlKTtcblxuXHRcdFx0XHRjb25zdCBzdWdnZXN0TW9kYWwgPSBuZXcgUGVydGluZW50UXVlc3Rpb25zU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjYXRlZ29yaWVzLCBjb250YWN0cywgdGhpcy5zZXR0aW5ncy5vdXRwdXRGb2xkZXIsIHRoaXMuc2V0dGluZ3MucXVlc3Rpb25zRm9sZGVyKS5vcGVuKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBlcnRpbmVudFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cblxuXHRhc3luYyBnZXRBbGxDb250YWN0cyh0aGVDb250YWN0RmlsZTogc3RyaW5nKTogUHJvbWlzZTxDb250YWN0W10+IHtcblx0XHRjb25zdCBjb250YWN0czogQ29udGFjdFtdID0gW107XG5cblx0XHRjb25zdCBmb2xkZXJPckZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhlQ29udGFjdEZpbGUpO1xuXG5cdFx0aWYgKGZvbGRlck9yRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG5cdFx0XHRsZXQgZmlsZUNvbnRlbnRzOiBzdHJpbmcgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZvbGRlck9yRmlsZSk7XG5cdFx0XHRjb25zdCBmaWxlTGluZXMgPSBmaWxlQ29udGVudHMuc3BsaXQoXCJcXG5cIik7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGZpbGVMaW5lcy5sZW5ndGgtMTsgaisrKSB7XG5cblx0XHRcdFx0Y29uc3QgW3RpdGxlLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBlbWFpbEFkZHJlc3NdID0gZmlsZUxpbmVzW2pdLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0Y29uc3QgY29udGFjdDogQ29udGFjdCA9IHsgdGl0bGUsIGZpcnN0TmFtZSwgbGFzdE5hbWUsIGVtYWlsQWRkcmVzcyB9O1xuXHRcdFx0XHRpZiAoY29udGFjdCAhPSBudWxsKVxuXHRcdFx0XHRcdGNvbnNvbGUuZGVidWcoYGNvbnRhY3QgPSAke2NvbnRhY3QudGl0bGV9IGFuZCAke2NvbnRhY3QuZmlyc3ROYW1lfSBhbmQgJHtjb250YWN0Lmxhc3ROYW1lfSBhbmQgJHtjb250YWN0LmVtYWlsQWRkcmVzc31gKTtcblx0XHRcdFx0aWYgKHZhbGlkQ29udGFjdChjb250YWN0KSkge1xuXHRcdFx0XHRcdGNvbnRhY3RzLnVuc2hpZnQoY29udGFjdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKGBJbnZhbGlkIGNvbnRhY3QgZm91bmQgLSBjb250YWN0ID0gJHtjb250YWN0fWApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmlxQnlPYmplY3QoY29udGFjdHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb250YWN0cztcblx0fVxuXG5cdGZpbmRBbGxDYXRlZ29yaWVzKCk6IHN0cmluZ1tdIHtcblx0XHQvLyAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0Y29uc3QgY2F0ZWdvcmllczogc3RyaW5nW10gPSBbXTtcblxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RTZWNvbmRMZXZlbEZvbGRlcihzdHI6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuXHRcdFx0Y29uc3QgcmVnZXggPSAvXFwvKFteXFwvXSopXFwvLztcblx0XHRcdGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBudWxsO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZvbGRlck9yRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnNldHRpbmdzLnF1ZXN0aW9uc0ZvbGRlcik7XG5cdFx0bGV0IG51bUZvbGRlcnMgPSAwO1xuXG5cdFx0aWYgKGZvbGRlck9yRmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcblx0XHRcdGZvciAobGV0IGNoaWxkIG9mIGZvbGRlck9yRmlsZS5jaGlsZHJlbikge1xuXHRcdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBURmlsZSkge1xuXHRcdFx0XHRcdC8vIFRvcCBsZXZlbCBRdWVzdGlvbnMgY2F0ZWdvcnkgZmlsZVxuXHRcdFx0XHR9IGVsc2UgeyAvLyBDYXRlZ29yeSBGb2xkZXJcblx0XHRcdFx0XHRjb25zdCBjYXRlZ29yeUZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjaGlsZC5wYXRoKVxuXHRcdFx0XHRcdGlmIChjYXRlZ29yeUZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcblx0XHRcdFx0XHRcdGZvciAobGV0IGlubmVyQ2hpbGQgb2YgY2F0ZWdvcnlGb2xkZXIuY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKGlubmVyQ2hpbGQgaW5zdGFuY2VvZiBURmlsZSkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHN1YnN0cmluZyA9IGV4dHJhY3RTZWNvbmRMZXZlbEZvbGRlcihpbm5lckNoaWxkLnBhdGgpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChzdWJzdHJpbmcgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5kZWJ1ZyhgREVCVUc6IHN1YnN0cmluZyA9ICR7c3Vic3RyaW5nfWApO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFjYXRlZ29yaWVzLmNvbnRhaW5zKHN1YnN0cmluZykpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2F0ZWdvcmllcy51bnNoaWZ0KHN1YnN0cmluZyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKGBDb3VsZG4ndCBleHRyYWN0IGZvbGRlciBzdWJzdHJpbmcgZnJvbSAke2lubmVyQ2hpbGQucGF0aH1gKTtcblx0XHRcdFx0XHRcdFx0XHR9IC8vIGVuZGlmIHN1YnN0cmluZ1xuXHRcdFx0XHRcdFx0XHR9IC8vIGVuZGlmIGlubmVyY0hJTERcblx0XHRcdFx0XHRcdH0gLy9lbmRmb3IgaW5uZXJjaGlsZFxuXHRcdFx0XHRcdH0gLy9lbmRpZiBpbnN0YW5jZW9mIFRGb2xkZXJcblx0XHRcdFx0fSAvL2VuZGlmIGluc3RhbmNlIG9mIFRGaWxlXG5cblx0XHRcdH0vL2VuZGZvciBjaGlsZCBvZiB0Zm9sZGVyXG5cdFx0XHRjb25zb2xlLmRlYnVnKGBudW1Gb2xkZXJzPSR7bnVtRm9sZGVyc31gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKGBOT1QgQU4gSU5TVEFOQ0UgT0YgVEZvbGRlciBpbnN0ZWFkIGl0IGlzICR7Zm9sZGVyT3JGaWxlfWApO1xuXHRcdH1cblxuXHRcdHJldHVybiBjYXRlZ29yaWVzO1xuXHR9XG5cblxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUuaW5mbyhcIlVubG9hZGluZyBQZXJ0aW5lbnRRdWVzdGlvbnMgcGx1Z2luLi4uXCIpO1xuXHR9XG5cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5cblxuY2xhc3MgUGVydGluZW50UXVlc3Rpb25zU3VnZ2VzdE1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPHN0cmluZz4ge1xuXHRjYXRlZ29yaWVzOiBzdHJpbmdbXTtcblx0Y29udGFjdHM6IENvbnRhY3RbXTtcblx0b3V0cHV0Rm9sZGVyOiBzdHJpbmc7XG5cdHF1ZXN0aW9uc0ZvbGRlcjogc3RyaW5nO1xuXHR2YXVsdDogVmF1bHQ7XG5cblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgY2F0ZWdvcmllczogc3RyaW5nW10sIGNvbnRhY3RzOiBDb250YWN0W10sIG91dHB1dEZvbGRlcjogc3RyaW5nLCBxdWVzdGlvbnNGb2xkZXI6IHN0cmluZykge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy52YXVsdCA9IGFwcC52YXVsdDtcblx0XHR0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuXHRcdHRoaXMuY29udGFjdHMgPSBjb250YWN0cztcblx0XHR0aGlzLm91dHB1dEZvbGRlciA9IG91dHB1dEZvbGRlcjtcblx0XHR0aGlzLnF1ZXN0aW9uc0ZvbGRlciA9IHF1ZXN0aW9uc0ZvbGRlcjtcblx0fVxuXHQvLyBSZXR1cm5zIGFsbCBhdmFpbGFibGUgc3VnZ2VzdGlvbnMuXG5cdGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG5cdFx0dGhpcy5jYXRlZ29yaWVzLnNvcnQoKTsgLy8gc29ydCBhbmQgZW5zdXJlIEFMTF9DQVRFR09SSUVTIGlzIGZpcnN0IHNlbGVjdGlvblxuXHRcdGlmICh0aGlzLmNhdGVnb3JpZXNbMF0gIT0gQ29uc3RhbnRzLkFMTF9DQVRFR09SSUVTKSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHRoaXMuY2F0ZWdvcmllcy5pbmRleE9mKENvbnN0YW50cy5BTExfQ0FURUdPUklFUyk7XG5cdFx0XHQvLyB0aGlzLmNhdGVnb3JpZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHRoaXMuY2F0ZWdvcmllcy51bnNoaWZ0KENvbnN0YW50cy5BTExfQ0FURUdPUklFUyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNhdGVnb3JpZXMuZmlsdGVyKChjYXQpID0+XG5cdFx0XHRjYXQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxuXHRcdCk7XG5cdH1cblxuXHQvLyBSZW5kZXJzIGVhY2ggc3VnZ2VzdGlvbiBpdGVtLlxuXHRyZW5kZXJTdWdnZXN0aW9uKGNhdDogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcblx0XHRlbC5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IGNhdCB9KTtcblx0XHQvLyAgZWwuY3JlYXRlRWwoXCJzbWFsbFwiLCB7IHRleHQ6IGJvb2suYXV0aG9yIH0pO1xuXHR9XG5cblx0Ly8gUGVyZm9ybSBhY3Rpb24gb24gdGhlIHNlbGVjdGVkIHN1Z2dlc3Rpb24uXG5cdGFzeW5jIG9uQ2hvb3NlU3VnZ2VzdGlvbihjYXQ6IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuXG5cdFx0dGhpcy5jcmVhdGVGb2xkZXIodGhpcy5vdXRwdXRGb2xkZXIpO1xuXHRcdGlmIChjYXQgIT0gQ29uc3RhbnRzLkFMTF9DQVRFR09SSUVTKSB7XG5cdFx0XHR0aGlzLmNhdGVnb3JpZXMgPSBbY2F0XTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jYXRlZ29yaWVzLnNoaWZ0KCk7IC8vIHJlbW92ZSBBTExfQ0FURUdPUklFUyBhbmQgaXRlcmF0ZSB0aHJvdWdoIEFMTCBjYXRlZ29yaWVzXG5cdFx0fVxuXHRcdC8vIEZPUkVFQUNIIFF1ZXN0aW9uIENhdGVnb3J5XG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNhdGVnb3JpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGNvbnNvbGUuZGVidWcoYGNhdCAke2p9ID0gJHt0aGlzLmNhdGVnb3JpZXNbal19YCk7XG5cdFx0XHQvLyBHZXQgYWxsIHRoZSBxdWVzdGlvbnNcblx0XHRcdGxldCB0aGVRdWVzdGlvbnMgPSBhd2FpdCB0aGlzLmdldENhdGVnb3J5UXVlc3Rpb25zKHRoaXMuY2F0ZWdvcmllc1tqXSk7XG5cblx0XHRcdGlmICh0aGVRdWVzdGlvbnMgIT0gbnVsbCkgeyAvLyBObyBjYXRlZ29yeSBxdWVzdGlvbnMsIHNvIGRvbid0IGNyZWF0ZSBhIGNhdGVnb3J5IGZvbGRlciBvciBvcHRpb25cblx0XHRcdFx0Ly8gbmVlZCB0aGUgZGlyZWN0b3J5IHNlcGFyYXRvciBcblx0XHRcdFx0Y29uc3QgdGhlRm9sZGVyID0gdGhpcy5vdXRwdXRGb2xkZXIuY29uY2F0KENvbnN0YW50cy5NQUNfRk9MREVSX1NFUEFSQVRPUikuY29uY2F0KHRoaXMuY2F0ZWdvcmllc1tqXSk7XG5cdFx0XHRcdHRoaXMuY3JlYXRlRm9sZGVyKHRoZUZvbGRlcik7IC8vIENyZWF0ZSB0aGUgY2F0ZWdvcmllc1xuXHRcdFx0XHQvLyBGT1JFQUNIIEVtYWlsIENvbnRhY3Rcblx0XHRcdFx0aWYgKHRoaXMuY29udGFjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250YWN0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0Zm9yIChsZXQgayA9IDA7IGsgPCB0aGVRdWVzdGlvbnMubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0bGV0IHRoZVF1ZXN0aW9uID0gdGhlUXVlc3Rpb25zW2tdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLndyaXRlUXVlc3Rpb25GaWxlKHRoZVF1ZXN0aW9uLCB0aGVGb2xkZXIsIHRoaXMuY2F0ZWdvcmllc1tqXSwgdGhpcy5jb250YWN0cy5hdChpKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSAvL0VuZCBGT1JFQUNIIGNvbnRhY3Rcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb3IgKGxldCBrID0gMDsgayA8IHRoZVF1ZXN0aW9ucy5sZW5ndGg7IGsrKykge1xuXG5cdFx0XHRcdFx0XHRsZXQgdGhlUXVlc3Rpb24gPSB0aGVRdWVzdGlvbnNba107XG5cdFx0XHRcdFx0XHR0aGlzLndyaXRlUXVlc3Rpb25GaWxlKHRoZVF1ZXN0aW9uLCB0aGVGb2xkZXIsIHRoaXMuY2F0ZWdvcmllc1tqXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgQ291bGRuJ3QgcmVhZCBhbnkgZmlsZSBhdCAke3RoaXMucXVlc3Rpb25zRm9sZGVyfSBgKTtcblx0XHRcdH1cblxuXHRcdH0gLy9FbmQgRk9SRUFDSCBjYXRlZ29yeVxuXHR9XG5cblx0aXNBQ2FtcGFpZ24oY2FtcGFpZ246IHN0cmluZyl7XG5cdFx0bGV0IGl0SXMgOmJvb2xlYW4gPSBmYWxzZTtcblx0XHRpZiAoY2FtcGFpZ24gPT0gbnVsbCl7XG5cdFx0XHQ7XG5cdFx0fWVsc2UgaWYgKGNhbXBhaWduID09IHVuZGVmaW5lZCl7XG5cdFx0XHQ7XG5cdFx0fWVsc2UgaWYgKGNhbXBhaWduLmNvbnRhaW5zKCd0cnVlJykpe1xuXHRcdFx0aXRJcyA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBpdElzO1xuXHR9XG5cdGdldFRhZ3ModGFnczogc3RyaW5nKXtcblx0XHRsZXQgdGhlVGFncyA9IFwiXCI7XG5cdFx0aWYgKHRhZ3MgPT0gbnVsbCl7XG5cdFx0XHQ7XG5cdFx0fSBlbHNlIGlmICh0YWdzID09IHVuZGVmaW5lZCl7XG5cdFx0XHQ7XG5cdFx0fSBlbHNlIGlmICh0YWdzID09IFwiXCIpe1xuXHRcdFx0O1xuXHRcdH0gZWxzZXtcblx0XHRcdHRyeXtcblx0XHRcdFx0Y29uc3QgdGhlVGFnc0FycmF5ID0gdGFncy5zcGxpdCgnLCcpO1xuXHRcdFx0XHR0aGVUYWdzID0gQ29uc3RhbnRzLlRBR1NfU1BFQ0lGSUVSLmNvbmNhdChcIiBbXCIpO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoZVRhZ3NBcnJheS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChpIT0wKXtcblx0XHRcdFx0XHRcdHRoZVRhZ3MgPSB0aGVUYWdzLmNvbmNhdChcIixcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoZVRhZ3MgPSB0aGVUYWdzLmNvbmNhdCh0aGVUYWdzQXJyYXlbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoZVRhZ3MgPSB0aGVUYWdzLmNvbmNhdChcIl1cIik7XG5cdFx0XHR9Y2F0Y2ggKGUpe1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBVbmNhdWdodCBleGNlcHRpb24gZ2V0dGluZyB0YWdzOiAke2V9YCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVUYWdzO1xuXHR9XG5cdGdldERlYWRsaW5lKGRlYWRsaW5lOiBzdHJpbmcpe1xuXHRcdGxldCB0aGVEZWFkbGluZSA9IFwiXCI7XG5cdFx0aWYgKGRlYWRsaW5lID09IG51bGwpe1xuXHRcdFx0O1xuXHRcdH0gZWxzZSBpZiAoZGVhZGxpbmUgPT0gdW5kZWZpbmVkKXtcblx0XHRcdDtcblx0XHR9IGVsc2UgaWYgKGRlYWRsaW5lID09IFwiXCIpe1xuXHRcdFx0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cnl7XG5cdFx0XHRcdHRoZURlYWRsaW5lID0gQ29uc3RhbnRzLkRFQURMSU5FX1NQRUNJRklFUi5jb25jYXQoXCIgXCIpLmNvbmNhdChkZWFkbGluZS5yZXBsYWNlKC9cXHMvZywgXCJcIikpO1xuXHRcdFx0fWNhdGNoIChlKXtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgVW5jYXVnaHQgZXhjZXB0aW9uIGluIGdldERlYWRsaW5lOiAke2V9YCk7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIHRoZURlYWRsaW5lO1xuXHR9XG5cdGZvcm1hdEhhc2h0YWdzKHRoZVF1ZXN0aW9uOiBRdWVzdGlvbkluZm8pOiBzdHJpbmd7XG5cdFx0bGV0IHRoZVRhZ3MgPSBcIlwiO1xuXHRcdGlmICh0aGVRdWVzdGlvbi50YWdzLmxlbmd0aCA+IDApe1xuXHRcdFx0Y29uc3QgdGFnc0FycmF5ID0gdGhlUXVlc3Rpb24udGFncy5yZXBsYWNlKC8sL2csJyAnKS5zcGxpdCgnICcpOyAvLyBSZXBsYWNlIGNvbW1hcyB3aXRoIHNwYWNlcyBhbmQgdGhlbiBzcGxpdFxuXHRcdFx0bGV0IHRhZ3MgPSBcIlwiO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0YWdzQXJyYXkubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHR0YWdzID0gdGFncy5jb25jYXQoJyMnKS5jb25jYXQodGFnc0FycmF5W2ldKS5jb25jYXQoJyAnKTtcblx0XHRcdH1cblx0XHRcdHRoZVRhZ3MgPSB0aGVUYWdzLmNvbmNhdCh0YWdzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoZVRhZ3M7XG5cdH1cblx0YXN5bmMgd3JpdGVRdWVzdGlvbkZpbGUodGhlUXVlc3Rpb246IFF1ZXN0aW9uSW5mbywgdGhlRm9sZGVyOiBzdHJpbmcsIGNhdGVnb3J5OiBzdHJpbmcsIGNvbnRhY3Q/OiBDb250YWN0KSB7XG5cdFx0Y29uc3QgdGhlU3ViamVjdCA9IENvbnN0YW50cy5TVUJKRUNUX0dPRVNfSEVSRTtcblx0XHRjb25zdCBhQ2FtcGFpZ24gPSB0aGlzLmlzQUNhbXBhaWduKHRoZVF1ZXN0aW9uLmNhbXBhaWduKTtcblx0XHRsZXQgZGVhZGxpbmUgPSB0aGlzLmdldERlYWRsaW5lKHRoZVF1ZXN0aW9uLmRlYWRsaW5lKTtcblx0XHRpZiAoZGVhZGxpbmUgIT0gXCJcIil7XG5cdFx0XHRkZWFkbGluZSA9IFwiXFxuXCIuY29uY2F0KGRlYWRsaW5lKTtcblx0XHR9XG5cblx0XHRsZXQgdGFncyA9IHRoaXMuZ2V0VGFncyh0aGVRdWVzdGlvbi50YWdzKTtcblx0XHRpZiAodGFncyAhPSBcIlwiKXtcblx0XHRcdHRhZ3MgPSBcIlxcblwiLmNvbmNhdCh0YWdzKTtcblx0XHR9XHRcdFxuXHRcblx0XHRjb25zdCB0aGVGaWxlRnJvbnRNYXR0ZXIgPVx0YC0tLVxcbnB1Ymxpc2g6IHRydWVcXG50b3NlbmQ6IHRydWVcXG5zZW50OiBmYWxzZVxcbmNhdGVnb3J5OiAke2NhdGVnb3J5fVxcbmNhbXBhaWduOiAke2FDYW1wYWlnbn0ke2RlYWRsaW5lfSR7dGFnc31cXG4tLS1cXG4jIyBJbnN0cnVjdGlvbnNcXG4tIHJlU2VhcmNoIC0gVGhlIGNvbnRlbnQgYW5kIHJlU2VhcmNoIE1lZGlhXFxuLSBTZW5kIEl0IVxcbi0gU2hhcmUgSXQhXFxuLSBbU3VwcG9ydCBVc10oaHR0cHM6Ly9wcm9qZWN0YnViYmxlYnVyc3QuY29tL1N1cHBvcnQrVXMpXFxuXFxuIyMgU2VuZCBJdFxcbmA7XG5cdFx0XG5cdFx0Y29uc3QgdGhlUXVlc3Rpb25GaWxlOiBzdHJpbmdbXSA9IHRoZVF1ZXN0aW9uLmJvZHkuc3BsaXQoQ29uc3RhbnRzLkVNQUlMX05MLDIpO1xuXHRcdGNvbnN0IHRoZVF1ZXN0aW9uRmlsZU5hbWUgPSB0aGVRdWVzdGlvbkZpbGVbMF07XG5cdFxuXG5cdFx0Y29uc3QgaW5kZXhCb2R5U3RhcnQgPSB0aGVRdWVzdGlvbi5ib2R5LmluZGV4T2YoQ29uc3RhbnRzLkVNQUlMX05MKSArIENvbnN0YW50cy5FTUFJTF9OTC5sZW5ndGg7IC8vIEZpcnN0IGxpbmUgaXMgdGhlIGZpbGVuYW1lXG5cdFx0Y29uc3QgdGhlUXVlc3Rpb25Cb2R5ID0gdGhlUXVlc3Rpb24uYm9keS5zdWJzdHJpbmcoaW5kZXhCb2R5U3RhcnQpO1xuXG5cdFx0aWYgKGluZGV4Qm9keVN0YXJ0ICE9IHVuZGVmaW5lZCkge1xuXHRcdFx0bGV0IHRoZUJvZHkgPSBcIlwiO1xuXHRcdFx0bGV0IHRoZUZpbGVOYW1lID0gXCJcIjtcblx0XHRcdGlmIChjb250YWN0KSB7XG5cdFx0XHRcdHRoZUJvZHkgPSBgJHtDb25zdGFudHMuRkFPfSAke2NvbnRhY3QudGl0bGV9ICR7Y29udGFjdC5maXJzdE5hbWV9ICR7Y29udGFjdC5sYXN0TmFtZX1gICsgQ29uc3RhbnRzLkVNQUlMX05MICsgYCR7dGhlUXVlc3Rpb25Cb2R5fWA7XG5cdFx0XHRcdC8vIENyZWF0ZSBQZXJ0aW5lbnQgUXVlc3Rpb25zIEZpbGUgdXNpbmcgRmlyc3QgTmFtZSBhbmQgTGFzdCBOYW1lXG5cdFx0XHRcdHRoZUZpbGVOYW1lID0gdGhlRm9sZGVyLmNvbmNhdChcIi9cIikuY29uY2F0KGNvbnRhY3QuZmlyc3ROYW1lICsgY29udGFjdC5sYXN0TmFtZSArIFwiLVwiICsgdGhlUXVlc3Rpb25GaWxlTmFtZSArIFwiLm1kXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhlQm9keSA9IGAke0NvbnN0YW50cy5GQU99YCArIENvbnN0YW50cy5FTUFJTF9OTCArIGAke3RoZVF1ZXN0aW9uQm9keX1gO1xuXHRcdFx0XHR0aGVGaWxlTmFtZSA9IHRoZUZvbGRlci5jb25jYXQoXCIvXCIpLmNvbmNhdCh0aGVRdWVzdGlvbkZpbGVOYW1lKSArIFwiLm1kXCI7XG5cdFx0XHR9XG5cdFx0XHQvLyBGaWxlIGRvZXMgbm90IGV4aXN0LCBzbyBjcmVhdGVcblx0XHRcdGxldCB0aGVGaWxlID0gYXdhaXQgdGhpcy5jcmVhdGVGaWxlKHRoZUZpbGVOYW1lLCB0aGVGaWxlRnJvbnRNYXR0ZXIpO1xuXG5cblx0XHRcdGlmICh0aGVGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcblx0XHRcdFx0bGV0IHRoZUNvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHRpZiAoY29udGFjdCkge1xuXHRcdFx0XHRcdHRoZUNvbnRlbnQgPSAoXCJgYGBlbWFpbFxcblwiLmNvbmNhdChgdG86ICR7Y29udGFjdC5lbWFpbEFkZHJlc3N9XFxuc3ViamVjdDogJHt0aGVTdWJqZWN0fVxcbmJvZHk6IFxcXCIke3RoZUJvZHl9XFxcIlxcbmApLmNvbmNhdChcImBgYFwiKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gTm8gY29udGFjdCBzbyBqdXN0IGdlbmVyYXRpbmcgYW4gZWFtcGxlIGVtYWlsXG5cdFx0XHRcdFx0dGhlQ29udGVudCA9IChcImBgYGVtYWlsXFxuXCIuY29uY2F0KGB0bzogc29tZW9uZUBleGFtcGxlLmNvbVxcbnN1YmplY3Q6ICR7dGhlU3ViamVjdH1cXG5ib2R5OiBcXFwiJHt0aGVCb2R5fVxcXCJcXG5gKS5jb25jYXQoXCJgYGBcIikpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoZUNvbnRlbnQgPSB0aGVDb250ZW50LmNvbmNhdChDb25zdGFudHMuRU1BSUxfTkwpLmNvbmNhdCgnIyMgU2hhcmUgSXRcXG4nKTtcblx0XHRcdC8vXHR0aGVDb250ZW50ID0gdGhlQ29udGVudC5jb25zdHJ1Y3RUd2VldCh0d2VldCk7XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VUkxfZW5jb2RpbmdcblxuXHRcdFx0XHRsZXQgdHdlZXQgPSAnW1R3aXR0ZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3RleHQ9Jztcblx0XHRcdFx0bGV0IHR3ZWV0Qm9keSA9IHRoaXMuZm9ybWF0SGFzaHRhZ3ModGhlUXVlc3Rpb24pO1xuXG5cdFx0XHRcdGNvbnN0IHJlID0gLyAvZztcblx0XHRcdFx0dHdlZXRCb2R5ID0gdHdlZXRCb2R5LmNvbmNhdChDb25zdGFudHMuUEJCX1BRX0RJUikuY29uY2F0KHRoZVF1ZXN0aW9uRmlsZU5hbWUucmVwbGFjZShyZSwnKycpKTtcblx0XHRcdFx0dHdlZXQgPSB0d2VldC5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHR3ZWV0Qm9keSkpLmNvbmNhdCgnKVxcbicpO1xuXHRcdFx0XHR0aGVDb250ZW50ID0gdGhlQ29udGVudC5jb25jYXQodHdlZXQpO1xuXHRcdFxuXHRcdFx0XHRsZXQgZmIgPSAnW0ZhY2Vib29rXShodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyLnBocD91PSc7XG5cdFx0XHRcdGxldCBmYkJvZHkgPSB0aGlzLmZvcm1hdEhhc2h0YWdzKHRoZVF1ZXN0aW9uKTtcblxuXHRcdFx0XHRmYkJvZHkgPSBmYkJvZHkuY29uY2F0KENvbnN0YW50cy5QQkJfUFFfRElSKS5jb25jYXQodGhlUXVlc3Rpb25GaWxlTmFtZS5yZXBsYWNlKHJlLCcrJykpO1xuXHRcdFx0XHRmYiA9IGZiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoZmJCb2R5KSkuY29uY2F0KCcpXFxuXFxuJyk7XG5cdFx0XHRcdHRoZUNvbnRlbnQgPSB0aGVDb250ZW50LmNvbmNhdChmYik7XG5cdFx0XHRcdFxuXHRcdFx0XG5cdFx0XHRcdHRoZUNvbnRlbnQgPSB0aGVDb250ZW50LmNvbmNhdCgnIyMgcmVTZWFyY2ggTWVkaWFcXG4jIyMgSW1hZ2VcXG4nKTtcblx0XHRcdFx0aWYgKHRoZVF1ZXN0aW9uLmltYWdlLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRcdHRoZUNvbnRlbnQgPSB0aGVDb250ZW50LmNvbmNhdChDb25zdGFudHMuRU1BSUxfTkwpLmNvbmNhdCh0aGVRdWVzdGlvbi5pbWFnZSk7XG5cdFx0XHRcdH0gXG5cdFx0XHRcdHRoZUNvbnRlbnQgPSB0aGVDb250ZW50LmNvbmNhdCgnXFxuIyMjIFZpZGVvXFxuJyk7XG5cdFx0XHRcdGlmICh0aGVRdWVzdGlvbi52aWRlby5sZW5ndGggPiAwKXtcblx0XHRcdFx0XHR0aGVDb250ZW50ID0gdGhlQ29udGVudC5jb25jYXQoQ29uc3RhbnRzLlZJREVPX0VNQkVEMSkuY29uY2F0KHRoZVF1ZXN0aW9uLnZpZGVvKS5jb25jYXQoQ29uc3RhbnRzLlZJREVPX0VNQkVEMik7XG5cdFx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuYXBwZW5kKHRoZUZpbGUsIHRoZUNvbnRlbnQpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0bmV3IE5vdGljZSgnQ291bGQgbm90IGFwcGVuZCcpO1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBhcHBlbmQgdG8gZmlsZTogJHt0aGVGaWxlTmFtZX0gZHVlIHRvICR7ZX1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdG5ldyBOb3RpY2UoJ0NvdWxkIG5vdCBjcmVhdGUgZmlsZScpO1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBFcnJvciAtIGNvdWxkIG5vdCBjcmVhdGUgZmlsZSBmb3IgJHt0aGVGaWxlTmFtZX1gKTtcblx0XHRcdH1cblx0XHR9IC8vIGVuZGlmIGluZGV4IHVuZGVmaW5lZFxuXHR9XG5cblx0Ly8gZnVuY3Rpb24gY29uc3RydWN0VHdlZXQoc3RyOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcblx0Ly8gXHRjb25zdCByZWdleCA9IC9cXC8oW15cXC9dKilcXC8vO1xuXHQvLyBcdGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcblxuXHQvLyBcdHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcblx0Ly8gfVxuXG5cdGFzeW5jIGNyZWF0ZUZpbGUodGhlRmlsZVBhdGg6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTxURmlsZSB8IG51bGw+IHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKCFmaWxlRXhpc3RzKHRoZUZpbGVQYXRoLCB0aGlzLmFwcCkpIHtcblx0XHRcdFx0bGV0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKHRoZUZpbGVQYXRoLCBjb250ZW50KVxuXHRcdFx0XHRjb25zb2xlLmRlYnVnKGBERUJVRzpDcmVhdGVkIEZpbGUgJHt0aGVGaWxlUGF0aH1gKTtcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZWRGaWxlO1xuXHRcdFx0fVxuXG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgY3JlYXRlRmlsZTogZmlsZVBhdGg6ICR0aGVGaWxlUGF0aCwgZXJyb3I6ICR7ZX1gKTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0YXN5bmMgY3JlYXRlRm9sZGVyKHRoZUZvbGRlcjogc3RyaW5nKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghZm9sZGVyRXhpc3RzKHRoZUZvbGRlciwgdGhpcy5hcHApKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcih0aGVGb2xkZXIpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHRcdH1cblx0fVxuXG5cdC8vIGdldENhdGVnb3J5UXVlc3Rpb25zIGFkZHMgdGhlIGZpbGUgbmFtZSBhcyB0aGUgZmlyc3QgbGluZS9lbGVtZW50IGluIHRoZSByZXR1cm4gc3RyaW5nXG5cdGFzeW5jIGdldENhdGVnb3J5UXVlc3Rpb25zKGNhdGVnb3J5OiBzdHJpbmcpOiBQcm9taXNlPFF1ZXN0aW9uSW5mb1tdIHwgbnVsbD4ge1xuXG5cdFx0dHJ5IHtcblx0XHRcdC8vIGNvbmNhdCB0aGUgLyBhcyBhbGwgZm9sZGVycyBuZWVkIHRvIGJlIGRldm9pZCBvZiAvIHNsYXNoZXMgdG8gd29yayB3aXRoIGFic3RyYWN0RmlsZVBhdGggaW1wbCBJIGhhdmVcblx0XHRcdGNvbnN0IGZvbGRlck9yRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnF1ZXN0aW9uc0ZvbGRlci5jb25jYXQoQ29uc3RhbnRzLk1BQ19GT0xERVJfU0VQQVJBVE9SLmNvbmNhdChjYXRlZ29yeSkpKTtcblxuXHRcdFx0aWYgKGZvbGRlck9yRmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcblx0XHRcdFx0Y29uc3QgdGhlUXVlc3Rpb25zOiBRdWVzdGlvbkluZm9bXSA9IFtdO1xuXHRcdFx0XHRmb3IgKGxldCBjaGlsZCBvZiBmb2xkZXJPckZpbGUuY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBURmlsZSkge1xuXHRcdFx0XHRcdFx0bGV0IHRoZVF1ZXN0aW9uTGluZXMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGNoaWxkKTtcblx0XHRcdFx0XHRcdGNvbnN0IGluZGV4ID0gY2hpbGQucGF0aC5sYXN0SW5kZXhPZihDb25zdGFudHMuTUFDX0ZPTERFUl9TRVBBUkFUT1IpOyAvLyBGb2xkZXIgcGF0aCAvIGZpbGVOYW1lXG5cdFx0XHRcdFx0XHRpZiAoaW5kZXggIT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdGxldCB0aGVGaWxlRnVsbFBhdGggPSBjaGlsZC5wYXRoICsgXCJcXG5cIjsgLy8gQWRkIGZpbGUgbmFtZVxuXHRcdFx0XHRcdFx0XHRjb25zdCB0aGVRdWVzdGlvbjogUXVlc3Rpb25JbmZvID0geyBib2R5OiBcIlwiLCBpbWFnZTogXCJcIiwgdmlkZW86IFwiXCIsIHRhZ3M6IFwiXCIsIGNhbXBhaWduOiBcIlwiLCBkZWFkbGluZTogXCJcIiB9O1xuXHRcdFx0XHRcdFx0XHR0aGVRdWVzdGlvbi5ib2R5ID0gdGhlRmlsZUZ1bGxQYXRoLnN1YnN0cmluZyhpbmRleCArIDEsIHRoZUZpbGVGdWxsUGF0aC5sZW5ndGggLSA0KTsgLy8gRmlyc3QgbGluZSBvZiBpbnRlcmltIGZpbGUgaXMgZmlsZW5hbWVcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBxdWVzdGlvbkxpbmVzID0gdGhlUXVlc3Rpb25MaW5lcy5zcGxpdChcIlxcblwiKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbGluZVN0YXJ0ID0gQ29uc3RhbnRzLkVNQUlMX05MLmNvbmNhdChDb25zdGFudHMuRU1BSUxfU09MKTtcblx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBxdWVzdGlvbkxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHF1ZXN0aW9uTGluZXNbaV0uY29udGFpbnMoQ29uc3RhbnRzLklNQUdFX1NQRUNJRklFUikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoZVF1ZXN0aW9uLmltYWdlID0gcXVlc3Rpb25MaW5lc1tpXS5zcGxpdChDb25zdGFudHMuSU1BR0VfU1BFQ0lGSUVSKVsxXTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHF1ZXN0aW9uTGluZXNbaV0uY29udGFpbnMoQ29uc3RhbnRzLlZJREVPX1NQRUNJRklFUikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoZVF1ZXN0aW9uLnZpZGVvID0gcXVlc3Rpb25MaW5lc1tpXS5zcGxpdChDb25zdGFudHMuVklERU9fU1BFQ0lGSUVSKVsxXTtcblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHF1ZXN0aW9uTGluZXNbaV0uY29udGFpbnMoQ29uc3RhbnRzLlRBR1NfU1BFQ0lGSUVSKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVRdWVzdGlvbi50YWdzID0gcXVlc3Rpb25MaW5lc1tpXS5zcGxpdChDb25zdGFudHMuVEFHU19TUEVDSUZJRVIpWzFdO1xuXHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmIChxdWVzdGlvbkxpbmVzW2ldLmNvbnRhaW5zKENvbnN0YW50cy5DQU1QQUlHTl9TUEVDSUZJRVIpKXtcblx0XHRcdFx0XHRcdFx0XHRcdHRoZVF1ZXN0aW9uLmNhbXBhaWduID0gcXVlc3Rpb25MaW5lc1tpXS5zcGxpdChDb25zdGFudHMuQ0FNUEFJR05fU1BFQ0lGSUVSKVsxXTtcblx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZiAocXVlc3Rpb25MaW5lc1tpXS5jb250YWlucyhDb25zdGFudHMuREVBRExJTkVfU1BFQ0lGSUVSKSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVRdWVzdGlvbi5kZWFkbGluZSA9IHF1ZXN0aW9uTGluZXNbaV0uc3BsaXQoQ29uc3RhbnRzLkRFQURMSU5FX1NQRUNJRklFUilbMV07XG5cdFx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhlUXVlc3Rpb24uYm9keSArPSBsaW5lU3RhcnQuY29uY2F0KHF1ZXN0aW9uTGluZXNbaV0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IC8vIGVuZGZvclxuXHRcdFx0XHRcdFx0XHR0aGVRdWVzdGlvbnMudW5zaGlmdCh0aGVRdWVzdGlvbik7XG5cdFx0XHRcdFx0XHR9IC8vIGVuZGlmIGluZGV4IFxuXG5cdFx0XHRcdFx0fS8vIGVuZGlmIGNoaWxkXG5cdFx0XHRcdH0gLy9lbmRmb3IgY2hpbGRcblx0XG5cdFx0XHRcdHJldHVybiB0aGVRdWVzdGlvbnM7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYEV4cGVjdGVkIGZvbGRlciBpbiBnZXRDYXRlZ29yeVF1ZXN0aW9ucyBwYXJhbSBidXQgc2VudCAke3RoaXMucXVlc3Rpb25zRm9sZGVyLmNvbmNhdChjYXRlZ29yeSl9YCk7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXG5cblxuXHR9XG5cblx0b25DbG9zZSgpIHtcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcblx0fVxufVxuXG5jbGFzcyBQZXJ0aW5lbnRTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogUGVydGluZW50UXVlc3Rpb25zO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFBlcnRpbmVudFF1ZXN0aW9ucykge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdHZW5lcmFsIFNldHRpbmdzJyB9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1F1ZXN0aW9ucyBGb2xkZXInKVxuXHRcdFx0LnNldERlc2MoJ0VudGVyIHRoZSBGb2xkZXIgTG9jYXRpb24nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgUXVlc3Rpb25zIEZvbGRlcicpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5xdWVzdGlvbnNGb2xkZXIpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmRlYnVnKCdRdWVzdGlvbnMgTG9jYXRpb246ICcgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucXVlc3Rpb25zRm9sZGVyID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1F1ZXN0aW9ucyBPdXRwdXQgRm9sZGVyJylcblx0XHRcdC5zZXREZXNjKCdFbnRlciB0aGUgUGVydGluZW50IFF1ZXN0aW9ucyBPdXRwdXQgRm9sZGVyIExvY2F0aW9uJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIFBlcnRpbmVudCBRdWVzdGlvbnMgT3V0cHV0IEZvbGRlcicpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vdXRwdXRGb2xkZXIpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmRlYnVnKCdPdXRwdXQgRm9sZGVyIExvY2F0aW9uOiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm91dHB1dEZvbGRlciA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKENvbnN0YW50cy5DT05UQUNUU19JTVBPUlRfRklMRSlcblx0XHRcdC5zZXREZXNjKCdFbnRlciB0aGUgQ29udGFjdHMgSW1wb3J0IEZpbGUgTG9jYXRpb24nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihDb25zdGFudHMuQ09OVEFDVFNfRklMRV9MT0NBVElPTilcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRhY3RzRmlsZSlcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRhY3RzRmlsZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cblxuIiwgImV4cG9ydCBjbGFzcyBBcHBTZXR0aW5nc3tcbiAgICBwdWJsaWMgc3RhdGljIEVNQUlMX05MID0gYFxcblxcbmA7Ly8gRW1haWwgbmV3IGxpbmVcbiAgICBwdWJsaWMgc3RhdGljICBFTUFJTF9TT0wgPSBgICBgOyAvL0VtYWlsIHN0YXJ0IG9mIGxpbmVcbiAgICBwdWJsaWMgc3RhdGljIE1BQ19GT0xERVJfU0VQQVJBVE9SID0gYC9gO1xuICAgIHB1YmxpYyBzdGF0aWMgQUxMX0NBVEVHT1JJRVMgPSBcIkFsbCBDYXRlZ29yaWVzXCI7XG4gICAgcHVibGljIHN0YXRpYyBDUkVBVEVfUEVSVElORU5UX1FVRVNUSU9OUyA9ICdDcmVhdGUgUGVydGluZW50IFF1ZXN0aW9ucyc7XG4gICAgcHVibGljIHN0YXRpYyBTVUJKRUNUX0dPRVNfSEVSRSA9IFwiU1VCSkVDVCBHT0VTIEhFUkVcIjtcbiAgICBwdWJsaWMgc3RhdGljIEZBTyA9IFwiRkFPXCI7XG4gICAgcHVibGljIHN0YXRpYyBDT05UQUNUU19GSUxFX0xPQ0FUSU9OID0gJ0VudGVyIENvbnRhY3RzIEZpbGUgTG9jYXRpb24nO1xuICAgIHB1YmxpYyBzdGF0aWMgQ09OVEFDVFNfSU1QT1JUX0ZJTEUgPSAnQ29udGFjdHMgSW1wb3J0IEZpbGUnO1xuICAgIHB1YmxpYyBzdGF0aWMgSU1BR0VfU1BFQ0lGSUVSID0gYGltYWdlOmA7XG4gICAgcHVibGljIHN0YXRpYyBWSURFT19TUEVDSUZJRVIgPSBgdmlkZW86YDtcbiAgICBwdWJsaWMgc3RhdGljIENBTVBBSUdOX1NQRUNJRklFUiA9IGBjYW1wYWlnbjpgO1xuICAgIHB1YmxpYyBzdGF0aWMgREVBRExJTkVfU1BFQ0lGSUVSID0gYGRlYWRsaW5lOmA7XG4gICAgcHVibGljIHN0YXRpYyBWSURFT19FTUJFRDEgPSBgPGNlbnRlcj48aWZyYW1lIHdpZHRoPVwiNTYwXCIgaGVpZ2h0PVwiMzE1XCIgc3JjPVwiYDtcbiAgICBwdWJsaWMgc3RhdGljIFZJREVPX0VNQkVEMiA9IGBcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvdz1cImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPjwvY2VudGVyPmBcbiAgICBwdWJsaWMgc3RhdGljIFRBR1NfU1BFQ0lGSUVSID0gYHRhZ3M6YDtcbiAgICBwdWJsaWMgc3RhdGljIFVSSV9QTFVTID0gYCUyQmA7XG4gICAgcHVibGljIHN0YXRpYyBVUklfU1BBQ0UgPSBgJTIwYDtcbiAgICBwdWJsaWMgc3RhdGljIFBCQl9QUV9ESVIgPSBgaHR0cHM6Ly9wcm9qZWN0YnViYmxlYnVyc3QuY29tL1BlcnRpbmVudCtRdWVzdGlvbnMvYDtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBZ0o7OztBQ0F6SSxJQUFNLGNBQU4sTUFBaUI7QUFvQnhCO0FBcEJhLFlBQ0ssV0FBVztBQUFBO0FBQUE7QUFBQTtBQURoQixZQUVNLFlBQVk7QUFBQTtBQUZsQixZQUdLLHVCQUF1QjtBQUg1QixZQUlLLGlCQUFpQjtBQUp0QixZQUtLLDZCQUE2QjtBQUxsQyxZQU1LLG9CQUFvQjtBQU56QixZQU9LLE1BQU07QUFQWCxZQVFLLHlCQUF5QjtBQVI5QixZQVNLLHVCQUF1QjtBQVQ1QixZQVVLLGtCQUFrQjtBQVZ2QixZQVdLLGtCQUFrQjtBQVh2QixZQVlLLHFCQUFxQjtBQVoxQixZQWFLLHFCQUFxQjtBQWIxQixZQWNLLGVBQWU7QUFkcEIsWUFlSyxlQUFlO0FBZnBCLFlBZ0JLLGlCQUFpQjtBQWhCdEIsWUFpQkssV0FBVztBQWpCaEIsWUFrQkssWUFBWTtBQWxCakIsWUFtQkssYUFBYTs7O0FEYy9CLElBQU0sbUJBQStDO0FBQUEsRUFDcEQsaUJBQWlCO0FBQUEsRUFDakIsY0FBYztBQUFBLEVBQ2QsY0FBYztBQUVmO0FBRUEsU0FBUyxhQUFhLE9BQTZCO0FBQ2xELFFBQU0sU0FBb0IsQ0FBQztBQUMzQixNQUFJLFVBQVU7QUFDZCxhQUFXLFFBQVEsT0FBTztBQUN6QixRQUFJLFlBQVk7QUFDaEIsYUFBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUN2QyxVQUFJLE9BQU8sQ0FBQyxFQUFFLGdCQUFnQixLQUFLLGNBQWM7QUFDaEQsb0JBQVk7QUFDWixn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
